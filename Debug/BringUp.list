
BringUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a8  080055a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b0  080055b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b0  080055b0  000155b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080055b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004c80  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c90  20004c90  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012204  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e7e  00000000  00000000  00032287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001080  00000000  00000000  00035108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c90  00000000  00000000  00036188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021c37  00000000  00000000  00036e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001243a  00000000  00000000  00058a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce178  00000000  00000000  0006ae89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004418  00000000  00000000  00139004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0013d41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005510 	.word	0x08005510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005510 	.word	0x08005510

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
return 0;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fa90 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f81a 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f8d8 	bl	80006d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000520:	f000 f874 	bl	800060c <MX_SPI1_Init>
  MX_USART1_Init();
 8000524:	f000 f8a8 	bl	8000678 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f002 fa20 	bl	800296c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led */
  LedHandle = osThreadNew(Task_Led, NULL, &Led_attributes);
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <main+0x34>)
 800052e:	2100      	movs	r1, #0
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <main+0x38>)
 8000532:	f002 fa65 	bl	8002a00 <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <main+0x3c>)
 800053a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f002 fa3a 	bl	80029b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x30>
 8000542:	bf00      	nop
 8000544:	0800556c 	.word	0x0800556c
 8000548:	0800079d 	.word	0x0800079d
 800054c:	200000c8 	.word	0x200000c8

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 ff9c 	bl	800549c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xb4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xb4>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xb4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <SystemClock_Config+0xb8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <SystemClock_Config+0xb8>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <SystemClock_Config+0xb8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd95 	bl	80010f0 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005cc:	f000 f8ee 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fff8 	bl	80015e0 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005f6:	f000 f8d9 	bl	80007ac <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_SPI1_Init+0x64>)
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <MX_SPI1_Init+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI1_Init+0x64>)
 8000618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800061c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_SPI1_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI1_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI1_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI1_Init+0x64>)
 8000638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_SPI1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI1_Init+0x64>)
 8000658:	220a      	movs	r2, #10
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_SPI1_Init+0x64>)
 800065e:	f001 f99f 	bl	80019a0 <HAL_SPI_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000668:	f000 f8a0 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40013000 	.word	0x40013000

08000678 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_USART1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_USART1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART1_Init+0x50>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_USART1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_USART1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_USART1_Init+0x50>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_USART1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_USART1_Init+0x50>)
 80006b6:	f001 fb0f 	bl	8001cd8 <HAL_USART_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f874 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000084 	.word	0x20000084
 80006cc:	40011000 	.word	0x40011000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <MX_GPIO_Init+0xc0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a28      	ldr	r2, [pc, #160]	; (8000790 <MX_GPIO_Init+0xc0>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xc0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_GPIO_Init+0xc0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_GPIO_Init+0xc0>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xc0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedD2_Pin|LedD3_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	21c0      	movs	r1, #192	; 0xc0
 8000722:	481c      	ldr	r0, [pc, #112]	; (8000794 <MX_GPIO_Init+0xc4>)
 8000724:	f000 fcca 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2102      	movs	r1, #2
 800072c:	481a      	ldr	r0, [pc, #104]	; (8000798 <MX_GPIO_Init+0xc8>)
 800072e:	f000 fcc5 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedD2_Pin */
  GPIO_InitStruct.Pin = LedD2_Pin;
 8000732:	2340      	movs	r3, #64	; 0x40
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LedD2_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0xc4>)
 800074a:	f000 fb1b 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LedD3_Pin */
  GPIO_InitStruct.Pin = LedD3_Pin;
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000756:	2302      	movs	r3, #2
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LedD3_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xc4>)
 8000766:	f000 fb0d 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800076a:	2302      	movs	r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000772:	2301      	movs	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0xc8>)
 8000782:	f000 faff 	bl	8000d84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	40020400 	.word	0x40020400

0800079c <Task_Led>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Led */
void Task_Led(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f002 f9bd 	bl	8002b24 <osDelay>
 80007aa:	e7fb      	b.n	80007a4 <Task_Led+0x8>

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_MspInit+0x54>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a11      	ldr	r2, [pc, #68]	; (800080c <HAL_MspInit+0x54>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x54>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_MspInit+0x54>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_MspInit+0x54>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_MspInit+0x54>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	210f      	movs	r1, #15
 80007fa:	f06f 0001 	mvn.w	r0, #1
 80007fe:	f000 fa68 	bl	8000cd2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <HAL_SPI_MspInit+0x94>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d133      	bne.n	800089a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <HAL_SPI_MspInit+0x98>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <HAL_SPI_MspInit+0x98>)
 800083c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_SPI_MspInit+0x98>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_SPI_MspInit+0x98>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <HAL_SPI_MspInit+0x98>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_SPI_MspInit+0x98>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800086a:	2338      	movs	r3, #56	; 0x38
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087a:	2305      	movs	r3, #5
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <HAL_SPI_MspInit+0x9c>)
 8000886:	f000 fa7d 	bl	8000d84 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2105      	movs	r1, #5
 800088e:	2023      	movs	r0, #35	; 0x23
 8000890:	f000 fa1f 	bl	8000cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000894:	2023      	movs	r0, #35	; 0x23
 8000896:	f000 fa38 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40013000 	.word	0x40013000
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400

080008b0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <HAL_USART_MspInit+0x94>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d134      	bne.n	800093c <HAL_USART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_USART_MspInit+0x98>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <HAL_USART_MspInit+0x98>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_USART_MspInit+0x98>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_USART_MspInit+0x98>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a14      	ldr	r2, [pc, #80]	; (8000948 <HAL_USART_MspInit+0x98>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_USART_MspInit+0x98>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800090a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800091c:	2307      	movs	r3, #7
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4809      	ldr	r0, [pc, #36]	; (800094c <HAL_USART_MspInit+0x9c>)
 8000928:	f000 fa2c 	bl	8000d84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2105      	movs	r1, #5
 8000930:	2025      	movs	r0, #37	; 0x25
 8000932:	f000 f9ce 	bl	8000cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000936:	2025      	movs	r0, #37	; 0x25
 8000938:	f000 f9e7 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40011000 	.word	0x40011000
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8ac 	bl	8000adc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000984:	f003 fd24 	bl	80043d0 <xTaskGetSchedulerState>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d001      	beq.n	8000992 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800098e:	f004 fb0b 	bl	8004fa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <SPI1_IRQHandler+0x10>)
 800099e:	f001 f889 	bl	8001ab4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000002c 	.word	0x2000002c

080009ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <USART1_IRQHandler+0x10>)
 80009b2:	f001 f9d3 	bl	8001d5c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000084 	.word	0x20000084

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd7 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f004 fd4b 	bl	80054ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd7b 	bl	8000510 <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a28:	080055b8 	.word	0x080055b8
  ldr r2, =_sbss
 8000a2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a30:	20004c90 	.word	0x20004c90

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f92b 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fea4 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f943 	bl	8000d26 <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f90b 	bl	8000cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	2000032c 	.word	0x2000032c

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000032c 	.word	0x2000032c

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff29 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff3e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff31 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffa2 	bl	8000c78 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d004      	beq.n	8000d5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e00c      	b.n	8000d76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2205      	movs	r2, #5
 8000d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0201 	bic.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e16b      	b.n	8001078 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 815a 	bne.w	8001072 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80b4 	beq.w	8001072 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b60      	ldr	r3, [pc, #384]	; (8001090 <HAL_GPIO_Init+0x30c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a5f      	ldr	r2, [pc, #380]	; (8001090 <HAL_GPIO_Init+0x30c>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <HAL_GPIO_Init+0x30c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f26:	4a5b      	ldr	r2, [pc, #364]	; (8001094 <HAL_GPIO_Init+0x310>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a52      	ldr	r2, [pc, #328]	; (8001098 <HAL_GPIO_Init+0x314>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02b      	beq.n	8000faa <HAL_GPIO_Init+0x226>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a51      	ldr	r2, [pc, #324]	; (800109c <HAL_GPIO_Init+0x318>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x222>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a50      	ldr	r2, [pc, #320]	; (80010a0 <HAL_GPIO_Init+0x31c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x21e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x320>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x21a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x216>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4d      	ldr	r2, [pc, #308]	; (80010ac <HAL_GPIO_Init+0x328>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x212>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x32c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x20e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x20a>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e00e      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f8e:	2308      	movs	r3, #8
 8000f90:	e00c      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f92:	2306      	movs	r3, #6
 8000f94:	e00a      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f96:	2305      	movs	r3, #5
 8000f98:	e008      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e004      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000faa:	2300      	movs	r3, #0
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	f002 0203 	and.w	r2, r2, #3
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fbc:	4935      	ldr	r1, [pc, #212]	; (8001094 <HAL_GPIO_Init+0x310>)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fee:	4a32      	ldr	r2, [pc, #200]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <HAL_GPIO_Init+0x334>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_GPIO_Init+0x334>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <HAL_GPIO_Init+0x334>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	f67f ae90 	bls.w	8000da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40013800 	.word	0x40013800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40021400 	.word	0x40021400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40021c00 	.word	0x40021c00
 80010b8:	40013c00 	.word	0x40013c00

080010bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d8:	e003      	b.n	80010e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	041a      	lsls	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e267      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110e:	4b88      	ldr	r3, [pc, #544]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b82      	ldr	r3, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b7e      	ldr	r3, [pc, #504]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e242      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a75      	ldr	r2, [pc, #468]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b70      	ldr	r3, [pc, #448]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6f      	ldr	r2, [pc, #444]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6c      	ldr	r2, [pc, #432]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b69      	ldr	r3, [pc, #420]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a68      	ldr	r2, [pc, #416]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b66      	ldr	r3, [pc, #408]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a65      	ldr	r2, [pc, #404]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcac 	bl	8000b04 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fca8 	bl	8000b04 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e207      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc98 	bl	8000b04 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fc94 	bl	8000b04 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1f3      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001206:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1c7      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4937      	ldr	r1, [pc, #220]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_RCC_OscConfig+0x244>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fc4d 	bl	8000b04 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc49 	bl	8000b04 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1a8      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4925      	ldr	r1, [pc, #148]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x244>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc2c 	bl	8000b04 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc28 	bl	8000b04 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e187      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d036      	beq.n	8001348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_RCC_OscConfig+0x248>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc0c 	bl	8000b04 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc08 	bl	8000b04 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e167      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
 800130e:	e01b      	b.n	8001348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x248>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbf5 	bl	8000b04 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	e00e      	b.n	800133c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fbf1 	bl	8000b04 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d907      	bls.n	800133c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e150      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001330:	40023800 	.word	0x40023800
 8001334:	42470000 	.word	0x42470000
 8001338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ea      	bne.n	800131e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8097 	beq.w	8001484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135a:	4b81      	ldr	r3, [pc, #516]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a7c      	ldr	r2, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b7a      	ldr	r3, [pc, #488]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b77      	ldr	r3, [pc, #476]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b74      	ldr	r3, [pc, #464]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a73      	ldr	r2, [pc, #460]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fbb1 	bl	8000b04 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fbad 	bl	8000b04 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e10c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x2ea>
 80013cc:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x30c>
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	4a5e      	ldr	r2, [pc, #376]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6713      	str	r3, [r2, #112]	; 0x70
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6713      	str	r3, [r2, #112]	; 0x70
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0304 	bic.w	r3, r3, #4
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d015      	beq.n	8001448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fb72 	bl	8000b04 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fb6e 	bl	8000b04 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0cb      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143a:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0ee      	beq.n	8001424 <HAL_RCC_OscConfig+0x334>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff fb5c 	bl	8000b04 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff fb58 	bl	8000b04 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0b5      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ee      	bne.n	8001450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a38      	ldr	r2, [pc, #224]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800147e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a1 	beq.w	80015d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d05c      	beq.n	8001554 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d141      	bne.n	8001526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb2c 	bl	8000b04 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb28 	bl	8000b04 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e087      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69da      	ldr	r2, [r3, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	3b01      	subs	r3, #1
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	491b      	ldr	r1, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb01 	bl	8000b04 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fafd 	bl	8000b04 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e05c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x416>
 8001524:	e054      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff faea 	bl	8000b04 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fae6 	bl	8000b04 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e045      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x444>
 8001552:	e03d      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e038      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000
 8001568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x4ec>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d028      	beq.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d121      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d11a      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d111      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	3b01      	subs	r3, #1
 80015b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0cc      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90c      	bls.n	800161c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800163e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d044      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d119      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e067      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4934      	ldr	r1, [pc, #208]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff fa18 	bl	8000b04 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff fa14 	bl	8000b04 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e04f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d20c      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f978 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	08005590 	.word	0x08005590
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b090      	sub	sp, #64	; 0x40
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d00d      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x40>
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	f200 80a1 	bhi.w	8001918 <HAL_RCC_GetSysClockFreq+0x16c>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x34>
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017de:	e09b      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_GetSysClockFreq+0x184>)
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017e4:	e09b      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e6:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ea:	e098      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4b4f      	ldr	r3, [pc, #316]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f6:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d028      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	2200      	movs	r2, #0
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	627a      	str	r2, [r7, #36]	; 0x24
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001814:	2100      	movs	r1, #0
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 8001818:	fb03 f201 	mul.w	r2, r3, r1
 800181c:	2300      	movs	r3, #0
 800181e:	fb00 f303 	mul.w	r3, r0, r3
 8001822:	4413      	add	r3, r2
 8001824:	4a43      	ldr	r2, [pc, #268]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 8001826:	fba0 1202 	umull	r1, r2, r0, r2
 800182a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800182c:	460a      	mov	r2, r1
 800182e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	4413      	add	r3, r2
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001838:	2200      	movs	r2, #0
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	61fa      	str	r2, [r7, #28]
 800183e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001846:	f7fe fcc3 	bl	80001d0 <__aeabi_uldivmod>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4613      	mov	r3, r2
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001852:	e053      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	617a      	str	r2, [r7, #20]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001866:	f04f 0b00 	mov.w	fp, #0
 800186a:	4652      	mov	r2, sl
 800186c:	465b      	mov	r3, fp
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	ebb2 080a 	subs.w	r8, r2, sl
 8001886:	eb63 090b 	sbc.w	r9, r3, fp
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001896:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800189a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800189e:	ebb2 0408 	subs.w	r4, r2, r8
 80018a2:	eb63 0509 	sbc.w	r5, r3, r9
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	00eb      	lsls	r3, r5, #3
 80018b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b4:	00e2      	lsls	r2, r4, #3
 80018b6:	4614      	mov	r4, r2
 80018b8:	461d      	mov	r5, r3
 80018ba:	eb14 030a 	adds.w	r3, r4, sl
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	eb45 030b 	adc.w	r3, r5, fp
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d2:	4629      	mov	r1, r5
 80018d4:	028b      	lsls	r3, r1, #10
 80018d6:	4621      	mov	r1, r4
 80018d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018dc:	4621      	mov	r1, r4
 80018de:	028a      	lsls	r2, r1, #10
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	2200      	movs	r2, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018f0:	f7fe fc6e 	bl	80001d0 <__aeabi_uldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800190c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001916:	e002      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetSysClockFreq+0x184>)
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800191c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001920:	4618      	mov	r0, r3
 8001922:	3740      	adds	r7, #64	; 0x40
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400
 8001934:	017d7840 	.word	0x017d7840

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_RCC_GetHCLKFreq+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001954:	f7ff fff0 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0a9b      	lsrs	r3, r3, #10
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	080055a0 	.word	0x080055a0

08001978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800197c:	f7ff ffdc 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0b5b      	lsrs	r3, r3, #13
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	; (800199c <HAL_RCC_GetPCLK2Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	080055a0 	.word	0x080055a0

080019a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07b      	b.n	8001aaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d108      	bne.n	80019cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019c2:	d009      	beq.n	80019d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
 80019ca:	e005      	b.n	80019d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe ff0c 	bl	8000810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	ea42 0103 	orr.w	r1, r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	f003 0104 	and.w	r1, r3, #4
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f003 0210 	and.w	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10e      	bne.n	8001af4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
    return;
 8001af2:	e0ce      	b.n	8001c92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_SPI_IRQHandler+0x5e>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
    return;
 8001b10:	e0bf      	b.n	8001c92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <HAL_SPI_IRQHandler+0x7e>
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80b0 	beq.w	8001c92 <HAL_SPI_IRQHandler+0x1de>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80aa 	beq.w	8001c92 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d023      	beq.n	8001b90 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d011      	beq.n	8001b78 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	f043 0204 	orr.w	r2, r3, #4
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	e00b      	b.n	8001b90 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
        return;
 8001b8e:	e080      	b.n	8001c92 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d014      	beq.n	8001bc4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00c      	beq.n	8001be8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd2:	f043 0208 	orr.w	r2, r3, #8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d04f      	beq.n	8001c90 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001bfe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d104      	bne.n	8001c1c <HAL_SPI_IRQHandler+0x168>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d034      	beq.n	8001c86 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0203 	bic.w	r2, r2, #3
 8001c2a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d011      	beq.n	8001c58 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_SPI_IRQHandler+0x1e4>)
 8001c3a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f87c 	bl	8000d3e <HAL_DMA_Abort_IT>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d016      	beq.n	8001c8e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_SPI_IRQHandler+0x1e4>)
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f866 	bl	8000d3e <HAL_DMA_Abort_IT>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00a      	beq.n	8001c8e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001c84:	e003      	b.n	8001c8e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f808 	bl	8001c9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001c8c:	e000      	b.n	8001c90 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8001c8e:	bf00      	nop
    return;
 8001c90:	bf00      	nop
  }
}
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08001cb1 	.word	0x08001cb1

08001c9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff ffe6 	bl	8001c9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e033      	b.n	8001d52 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe fdd6 	bl	80008b0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fb61 	bl	80023d4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d30:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d40:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d117      	bne.n	8001dc2 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d012      	beq.n	8001dc2 <HAL_USART_IRQHandler+0x66>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00d      	beq.n	8001dc2 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b22      	cmp	r3, #34	; 0x22
 8001db0:	d103      	bne.n	8001dba <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f9ba 	bl	800212c <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8001db8:	e0e9      	b.n	8001f8e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa3c 	bl	8002238 <USART_TransmitReceive_IT>
      return;
 8001dc0:	e0e5      	b.n	8001f8e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80bb 	beq.w	8001f40 <HAL_USART_IRQHandler+0x1e4>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_USART_IRQHandler+0x84>
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80b0 	beq.w	8001f40 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_USART_IRQHandler+0xa4>
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_USART_IRQHandler+0xc4>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f043 0202 	orr.w	r2, r3, #2
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_USART_IRQHandler+0xe4>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f043 0204 	orr.w	r2, r3, #4
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00f      	beq.n	8001e6a <HAL_USART_IRQHandler+0x10e>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <HAL_USART_IRQHandler+0x102>
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f043 0208 	orr.w	r2, r3, #8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 808c 	beq.w	8001f8c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d011      	beq.n	8001ea2 <HAL_USART_IRQHandler+0x146>
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b22      	cmp	r3, #34	; 0x22
 8001e92:	d103      	bne.n	8001e9c <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f949 	bl	800212c <USART_Receive_IT>
 8001e9a:	e002      	b.n	8001ea2 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f9cb 	bl	8002238 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_USART_IRQHandler+0x16e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d031      	beq.n	8001f2e <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f88c 	bl	8001fe8 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d123      	bne.n	8001f26 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eec:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d013      	beq.n	8001f1e <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <HAL_USART_IRQHandler+0x238>)
 8001efc:	651a      	str	r2, [r3, #80]	; 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe ff1b 	bl	8000d3e <HAL_DMA_Abort_IT>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d016      	beq.n	8001f3c <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001f1c:	e00e      	b.n	8001f3c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f858 	bl	8001fd4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	e00a      	b.n	8001f3c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f854 	bl	8001fd4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001f2c:	e006      	b.n	8001f3c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f850 	bl	8001fd4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f3a:	e027      	b.n	8001f8c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001f3c:	bf00      	nop
    return;
 8001f3e:	e025      	b.n	8001f8c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d012      	beq.n	8001f70 <HAL_USART_IRQHandler+0x214>
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00d      	beq.n	8001f70 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b12      	cmp	r3, #18
 8001f5e:	d103      	bne.n	8001f68 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f873 	bl	800204c <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8001f66:	e012      	b.n	8001f8e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f965 	bl	8002238 <USART_TransmitReceive_IT>
    return;
 8001f6e:	e00e      	b.n	8001f8e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_USART_IRQHandler+0x232>
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f8b1 	bl	80020ec <USART_EndTransmit_IT>
    return;
 8001f8a:	e000      	b.n	8001f8e <HAL_USART_IRQHandler+0x232>
    return;
 8001f8c:	bf00      	nop
  }
}
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	08002025 	.word	0x08002025

08001f98 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ffe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff ffc8 	bl	8001fd4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b12      	cmp	r3, #18
 800205e:	d13e      	bne.n	80020de <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002068:	d114      	bne.n	8002094 <USART_Transmit_IT+0x48>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d110      	bne.n	8002094 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002086:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c9a      	adds	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
 8002092:	e008      	b.n	80020a6 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	1c59      	adds	r1, r3, #1
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6251      	str	r1, [r2, #36]	; 0x24
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4619      	mov	r1, r3
 80020b4:	8551      	strh	r1, [r2, #42]	; 0x2a
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c8:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002102:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff3b 	bl	8001f98 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b22      	cmp	r3, #34	; 0x22
 800213e:	d176      	bne.n	800222e <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002148:	d117      	bne.n	800217a <USART_Receive_IT+0x4e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d113      	bne.n	800217a <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	b29b      	uxth	r3, r3
 8002164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002168:	b29a      	uxth	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	1c9a      	adds	r2, r3, #2
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
 8002178:	e026      	b.n	80021c8 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218c:	d007      	beq.n	800219e <USART_Receive_IT+0x72>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <USART_Receive_IT+0x80>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e008      	b.n	80021be <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d120      	bne.n	8002222 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0220 	bic.w	r2, r2, #32
 80021ee:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021fe:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff fec7 	bl	8001fac <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e006      	b.n	8002230 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22ff      	movs	r2, #255	; 0xff
 8002228:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b32      	cmp	r3, #50	; 0x32
 800224a:	f040 80bd 	bne.w	80023c8 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d03d      	beq.n	80022d4 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d136      	bne.n	80022d4 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226e:	d114      	bne.n	800229a <USART_TransmitReceive_IT+0x62>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d110      	bne.n	800229a <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800228c:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	1c9a      	adds	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
 8002298:	e008      	b.n	80022ac <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6251      	str	r1, [r2, #36]	; 0x24
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d2:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04c      	beq.n	8002378 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d145      	bne.n	8002378 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f4:	d115      	bne.n	8002322 <USART_TransmitReceive_IT+0xea>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d111      	bne.n	8002322 <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	b29b      	uxth	r3, r3
 800230c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002310:	b29a      	uxth	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	1c9a      	adds	r2, r3, #2
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002320:	e023      	b.n	800236a <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232a:	d007      	beq.n	800233c <USART_TransmitReceive_IT+0x104>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <USART_TransmitReceive_IT+0x114>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e009      	b.n	8002360 <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d120      	bne.n	80023c4 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0220 	bic.w	r2, r2, #32
 8002390:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a0:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fe00 	bl	8001fc0 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e002      	b.n	80023ca <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80023d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d8:	b0c6      	sub	sp, #280	; 0x118
 80023da:	af00      	add	r7, sp, #0
 80023dc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80023e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68d9      	ldr	r1, [r3, #12]
 80023ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f021 030c 	bic.w	r3, r1, #12
 80023f8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80023fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800240a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800240e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002416:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800241c:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800241e:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	431a      	orrs	r2, r3
 8002428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800242c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800242e:	431a      	orrs	r2, r3
 8002430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002434:	4313      	orrs	r3, r2
 8002436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800243a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800243e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002448:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800244a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800245a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800245e:	f023 030c 	bic.w	r3, r3, #12
 8002462:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	431a      	orrs	r2, r3
 8002474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	431a      	orrs	r2, r3
 800247c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002480:	4313      	orrs	r3, r2
 8002482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002486:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800248a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002494:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6959      	ldr	r1, [r3, #20]
 800249e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80024a8:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80024aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <USART_SetConfig+0x30c>)
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d006      	beq.n	80024c4 <USART_SetConfig+0xf0>
 80024b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b89      	ldr	r3, [pc, #548]	; (80026e4 <USART_SetConfig+0x310>)
 80024be:	429a      	cmp	r2, r3
 80024c0:	f040 8114 	bne.w	80026ec <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024c4:	f7ff fa58 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
 80024c8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80024cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024d0:	2200      	movs	r2, #0
 80024d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80024d6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80024da:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80024de:	4622      	mov	r2, r4
 80024e0:	462b      	mov	r3, r5
 80024e2:	1891      	adds	r1, r2, r2
 80024e4:	6739      	str	r1, [r7, #112]	; 0x70
 80024e6:	415b      	adcs	r3, r3
 80024e8:	677b      	str	r3, [r7, #116]	; 0x74
 80024ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024ee:	4621      	mov	r1, r4
 80024f0:	eb12 0801 	adds.w	r8, r2, r1
 80024f4:	4629      	mov	r1, r5
 80024f6:	eb43 0901 	adc.w	r9, r3, r1
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800250a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800250e:	4690      	mov	r8, r2
 8002510:	4699      	mov	r9, r3
 8002512:	4623      	mov	r3, r4
 8002514:	eb18 0303 	adds.w	r3, r8, r3
 8002518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800251c:	462b      	mov	r3, r5
 800251e:	eb49 0303 	adc.w	r3, r9, r3
 8002522:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002532:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002536:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800253a:	460b      	mov	r3, r1
 800253c:	18db      	adds	r3, r3, r3
 800253e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002540:	4613      	mov	r3, r2
 8002542:	eb42 0303 	adc.w	r3, r2, r3
 8002546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002548:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800254c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002550:	f7fd fe3e 	bl	80001d0 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <USART_SetConfig+0x314>)
 800255a:	fba3 2302 	umull	r2, r3, r3, r2
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	011c      	lsls	r4, r3, #4
 8002562:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800256c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002570:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002574:	4642      	mov	r2, r8
 8002576:	464b      	mov	r3, r9
 8002578:	1891      	adds	r1, r2, r2
 800257a:	6639      	str	r1, [r7, #96]	; 0x60
 800257c:	415b      	adcs	r3, r3
 800257e:	667b      	str	r3, [r7, #100]	; 0x64
 8002580:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002584:	4641      	mov	r1, r8
 8002586:	1851      	adds	r1, r2, r1
 8002588:	65b9      	str	r1, [r7, #88]	; 0x58
 800258a:	4649      	mov	r1, r9
 800258c:	414b      	adcs	r3, r1
 800258e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800259c:	4659      	mov	r1, fp
 800259e:	00cb      	lsls	r3, r1, #3
 80025a0:	4651      	mov	r1, sl
 80025a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025a6:	4651      	mov	r1, sl
 80025a8:	00ca      	lsls	r2, r1, #3
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	4642      	mov	r2, r8
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025b8:	464b      	mov	r3, r9
 80025ba:	460a      	mov	r2, r1
 80025bc:	eb42 0303 	adc.w	r3, r2, r3
 80025c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025d0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025d8:	460b      	mov	r3, r1
 80025da:	18db      	adds	r3, r3, r3
 80025dc:	653b      	str	r3, [r7, #80]	; 0x50
 80025de:	4613      	mov	r3, r2
 80025e0:	eb42 0303 	adc.w	r3, r2, r3
 80025e4:	657b      	str	r3, [r7, #84]	; 0x54
 80025e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025ea:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025ee:	f7fd fdef 	bl	80001d0 <__aeabi_uldivmod>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <USART_SetConfig+0x314>)
 80025fa:	fba3 2301 	umull	r2, r3, r3, r1
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2264      	movs	r2, #100	; 0x64
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	1acb      	subs	r3, r1, r3
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <USART_SetConfig+0x314>)
 8002610:	fba3 2302 	umull	r2, r3, r3, r2
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800261c:	441c      	add	r4, r3
 800261e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002622:	2200      	movs	r2, #0
 8002624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002628:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800262c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002630:	4642      	mov	r2, r8
 8002632:	464b      	mov	r3, r9
 8002634:	1891      	adds	r1, r2, r2
 8002636:	64b9      	str	r1, [r7, #72]	; 0x48
 8002638:	415b      	adcs	r3, r3
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800263c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002640:	4641      	mov	r1, r8
 8002642:	1851      	adds	r1, r2, r1
 8002644:	6439      	str	r1, [r7, #64]	; 0x40
 8002646:	4649      	mov	r1, r9
 8002648:	414b      	adcs	r3, r1
 800264a:	647b      	str	r3, [r7, #68]	; 0x44
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8002658:	4659      	mov	r1, fp
 800265a:	00cb      	lsls	r3, r1, #3
 800265c:	4651      	mov	r1, sl
 800265e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002662:	4651      	mov	r1, sl
 8002664:	00ca      	lsls	r2, r1, #3
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	4603      	mov	r3, r0
 800266c:	4642      	mov	r2, r8
 800266e:	189b      	adds	r3, r3, r2
 8002670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002674:	464b      	mov	r3, r9
 8002676:	460a      	mov	r2, r1
 8002678:	eb42 0303 	adc.w	r3, r2, r3
 800267c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800268c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002690:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002694:	460b      	mov	r3, r1
 8002696:	18db      	adds	r3, r3, r3
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
 800269a:	4613      	mov	r3, r2
 800269c:	eb42 0303 	adc.w	r3, r2, r3
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026aa:	f7fd fd91 	bl	80001d0 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <USART_SetConfig+0x314>)
 80026b4:	fba3 1302 	umull	r1, r3, r3, r2
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	2164      	movs	r1, #100	; 0x64
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	3332      	adds	r3, #50	; 0x32
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <USART_SetConfig+0x314>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	f003 0207 	and.w	r2, r3, #7
 80026d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4422      	add	r2, r4
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	e109      	b.n	80028f2 <USART_SetConfig+0x51e>
 80026de:	bf00      	nop
 80026e0:	40011000 	.word	0x40011000
 80026e4:	40011400 	.word	0x40011400
 80026e8:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026ec:	f7ff f930 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80026f0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80026f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026f8:	2200      	movs	r2, #0
 80026fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026fe:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002702:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002706:	4642      	mov	r2, r8
 8002708:	464b      	mov	r3, r9
 800270a:	1891      	adds	r1, r2, r2
 800270c:	6339      	str	r1, [r7, #48]	; 0x30
 800270e:	415b      	adcs	r3, r3
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
 8002712:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002716:	4641      	mov	r1, r8
 8002718:	1854      	adds	r4, r2, r1
 800271a:	4649      	mov	r1, r9
 800271c:	eb43 0501 	adc.w	r5, r3, r1
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	00eb      	lsls	r3, r5, #3
 800272a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272e:	00e2      	lsls	r2, r4, #3
 8002730:	4614      	mov	r4, r2
 8002732:	461d      	mov	r5, r3
 8002734:	4643      	mov	r3, r8
 8002736:	18e3      	adds	r3, r4, r3
 8002738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800273c:	464b      	mov	r3, r9
 800273e:	eb45 0303 	adc.w	r3, r5, r3
 8002742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002752:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002756:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800275a:	460b      	mov	r3, r1
 800275c:	18db      	adds	r3, r3, r3
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002760:	4613      	mov	r3, r2
 8002762:	eb42 0303 	adc.w	r3, r2, r3
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002768:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800276c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002770:	f7fd fd2e 	bl	80001d0 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4b61      	ldr	r3, [pc, #388]	; (8002900 <USART_SetConfig+0x52c>)
 800277a:	fba3 2302 	umull	r2, r3, r3, r2
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	011c      	lsls	r4, r3, #4
 8002782:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800278c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002790:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002794:	4642      	mov	r2, r8
 8002796:	464b      	mov	r3, r9
 8002798:	1891      	adds	r1, r2, r2
 800279a:	6239      	str	r1, [r7, #32]
 800279c:	415b      	adcs	r3, r3
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
 80027a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027a4:	4641      	mov	r1, r8
 80027a6:	eb12 0a01 	adds.w	sl, r2, r1
 80027aa:	4649      	mov	r1, r9
 80027ac:	eb43 0b01 	adc.w	fp, r3, r1
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027c4:	4692      	mov	sl, r2
 80027c6:	469b      	mov	fp, r3
 80027c8:	4643      	mov	r3, r8
 80027ca:	eb1a 0303 	adds.w	r3, sl, r3
 80027ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027d2:	464b      	mov	r3, r9
 80027d4:	eb4b 0303 	adc.w	r3, fp, r3
 80027d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027ec:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80027f0:	460b      	mov	r3, r1
 80027f2:	18db      	adds	r3, r3, r3
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	4613      	mov	r3, r2
 80027f8:	eb42 0303 	adc.w	r3, r2, r3
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002802:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002806:	f7fd fce3 	bl	80001d0 <__aeabi_uldivmod>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4611      	mov	r1, r2
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <USART_SetConfig+0x52c>)
 8002812:	fba3 2301 	umull	r2, r3, r3, r1
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2264      	movs	r2, #100	; 0x64
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	1acb      	subs	r3, r1, r3
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <USART_SetConfig+0x52c>)
 8002828:	fba3 2302 	umull	r2, r3, r3, r2
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002834:	441c      	add	r4, r3
 8002836:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	1891      	adds	r1, r2, r2
 800284e:	6139      	str	r1, [r7, #16]
 8002850:	415b      	adcs	r3, r3
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002858:	4641      	mov	r1, r8
 800285a:	1851      	adds	r1, r2, r1
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	4649      	mov	r1, r9
 8002860:	414b      	adcs	r3, r1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002870:	4659      	mov	r1, fp
 8002872:	00cb      	lsls	r3, r1, #3
 8002874:	4651      	mov	r1, sl
 8002876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287a:	4651      	mov	r1, sl
 800287c:	00ca      	lsls	r2, r1, #3
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4603      	mov	r3, r0
 8002884:	4642      	mov	r2, r8
 8002886:	189b      	adds	r3, r3, r2
 8002888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800288c:	464b      	mov	r3, r9
 800288e:	460a      	mov	r2, r1
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80028a8:	460b      	mov	r3, r1
 80028aa:	18db      	adds	r3, r3, r3
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	4613      	mov	r3, r2
 80028b0:	eb42 0303 	adc.w	r3, r2, r3
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028be:	f7fd fc87 	bl	80001d0 <__aeabi_uldivmod>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <USART_SetConfig+0x52c>)
 80028c8:	fba3 1302 	umull	r1, r3, r3, r2
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	2164      	movs	r1, #100	; 0x64
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	3332      	adds	r3, #50	; 0x32
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <USART_SetConfig+0x52c>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	f003 0207 	and.w	r2, r3, #7
 80028e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4422      	add	r2, r4
 80028ee:	609a      	str	r2, [r3, #8]
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80028f8:	46bd      	mov	sp, r7
 80028fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028fe:	bf00      	nop
 8002900:	51eb851f 	.word	0x51eb851f

08002904 <__NVIC_SetPriority>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0a      	blt.n	800292e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	490c      	ldr	r1, [pc, #48]	; (8002950 <__NVIC_SetPriority+0x4c>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	440b      	add	r3, r1
 8002928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800292c:	e00a      	b.n	8002944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4908      	ldr	r1, [pc, #32]	; (8002954 <__NVIC_SetPriority+0x50>)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3b04      	subs	r3, #4
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	440b      	add	r3, r1
 8002942:	761a      	strb	r2, [r3, #24]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000e100 	.word	0xe000e100
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800295c:	2100      	movs	r1, #0
 800295e:	f06f 0004 	mvn.w	r0, #4
 8002962:	f7ff ffcf 	bl	8002904 <__NVIC_SetPriority>
#endif
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002972:	f3ef 8305 	mrs	r3, IPSR
 8002976:	603b      	str	r3, [r7, #0]
  return(result);
 8002978:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800297e:	f06f 0305 	mvn.w	r3, #5
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	e00c      	b.n	80029a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <osKernelInitialize+0x44>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <osKernelInitialize+0x44>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	e002      	b.n	80029a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000330 	.word	0x20000330

080029b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ba:	f3ef 8305 	mrs	r3, IPSR
 80029be:	603b      	str	r3, [r7, #0]
  return(result);
 80029c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80029c6:	f06f 0305 	mvn.w	r3, #5
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	e010      	b.n	80029f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <osKernelStart+0x48>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d109      	bne.n	80029ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029d6:	f7ff ffbf 	bl	8002958 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <osKernelStart+0x48>)
 80029dc:	2202      	movs	r2, #2
 80029de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80029e0:	f001 f868 	bl	8003ab4 <vTaskStartScheduler>
      stat = osOK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	e002      	b.n	80029f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029f0:	687b      	ldr	r3, [r7, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000330 	.word	0x20000330

08002a00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08e      	sub	sp, #56	; 0x38
 8002a04:	af04      	add	r7, sp, #16
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a10:	f3ef 8305 	mrs	r3, IPSR
 8002a14:	617b      	str	r3, [r7, #20]
  return(result);
 8002a16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d17e      	bne.n	8002b1a <osThreadNew+0x11a>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d07b      	beq.n	8002b1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a26:	2318      	movs	r3, #24
 8002a28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d045      	beq.n	8002ac6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <osThreadNew+0x48>
        name = attr->name;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <osThreadNew+0x6e>
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b38      	cmp	r3, #56	; 0x38
 8002a60:	d805      	bhi.n	8002a6e <osThreadNew+0x6e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <osThreadNew+0x72>
        return (NULL);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e054      	b.n	8002b1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00e      	beq.n	8002aa8 <osThreadNew+0xa8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b5f      	cmp	r3, #95	; 0x5f
 8002a90:	d90a      	bls.n	8002aa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <osThreadNew+0xa8>
        mem = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e010      	b.n	8002aca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10c      	bne.n	8002aca <osThreadNew+0xca>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d108      	bne.n	8002aca <osThreadNew+0xca>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <osThreadNew+0xca>
          mem = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	e001      	b.n	8002aca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d110      	bne.n	8002af2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ad8:	9202      	str	r2, [sp, #8]
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6a3a      	ldr	r2, [r7, #32]
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fe0c 	bl	8003704 <xTaskCreateStatic>
 8002aec:	4603      	mov	r3, r0
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	e013      	b.n	8002b1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d110      	bne.n	8002b1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fe57 	bl	80037be <xTaskCreate>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <osThreadNew+0x11a>
            hTask = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b1a:	693b      	ldr	r3, [r7, #16]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b2c:	f3ef 8305 	mrs	r3, IPSR
 8002b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <osDelay+0x1c>
    stat = osErrorISR;
 8002b38:	f06f 0305 	mvn.w	r3, #5
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e007      	b.n	8002b50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 ff7e 	bl	8003a4c <vTaskDelay>
    }
  }

  return (stat);
 8002b50:	68fb      	ldr	r3, [r7, #12]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <vApplicationGetIdleTaskMemory+0x30>)
 8002b72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000334 	.word	0x20000334
 8002b8c:	20000394 	.word	0x20000394

08002b90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <vApplicationGetTimerTaskMemory+0x2c>)
 8002ba0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <vApplicationGetTimerTaskMemory+0x30>)
 8002ba6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20000594 	.word	0x20000594
 8002bc0:	200005f4 	.word	0x200005f4

08002bc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f103 0208 	add.w	r2, r3, #8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f103 0208 	add.w	r2, r3, #8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f103 0208 	add.w	r2, r3, #8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	601a      	str	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d103      	bne.n	8002c86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e00c      	b.n	8002ca0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3308      	adds	r3, #8
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e002      	b.n	8002c94 <vListInsert+0x2e>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d2f6      	bcs.n	8002c8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6892      	ldr	r2, [r2, #8]
 8002cee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6852      	ldr	r2, [r2, #4]
 8002cf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d103      	bne.n	8002d0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	1e5a      	subs	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d52:	bf00      	nop
 8002d54:	e7fe      	b.n	8002d54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d56:	f002 f895 	bl	8004e84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	68f9      	ldr	r1, [r7, #12]
 8002d64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	441a      	add	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	3b01      	subs	r3, #1
 8002d88:	68f9      	ldr	r1, [r7, #12]
 8002d8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	441a      	add	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	22ff      	movs	r2, #255	; 0xff
 8002da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d114      	bne.n	8002dd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01a      	beq.n	8002dea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3310      	adds	r3, #16
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 f949 	bl	8004050 <xTaskRemoveFromEventList>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d012      	beq.n	8002dea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <xQueueGenericReset+0xcc>)
 8002dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	e009      	b.n	8002dea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3310      	adds	r3, #16
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fef2 	bl	8002bc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff feed 	bl	8002bc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dea:	f002 f87b 	bl	8004ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	e000ed04 	.word	0xe000ed04

08002dfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <xQueueGenericCreateStatic+0x52>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <xQueueGenericCreateStatic+0x56>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueGenericCreateStatic+0x58>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	623b      	str	r3, [r7, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <xQueueGenericCreateStatic+0x7e>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <xQueueGenericCreateStatic+0x82>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <xQueueGenericCreateStatic+0x84>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	61fb      	str	r3, [r7, #28]
}
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e9a:	2350      	movs	r3, #80	; 0x50
 8002e9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b50      	cmp	r3, #80	; 0x50
 8002ea2:	d00a      	beq.n	8002eba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	61bb      	str	r3, [r7, #24]
}
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002eba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ece:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f805 	bl	8002eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3730      	adds	r7, #48	; 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e002      	b.n	8002f0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	69b8      	ldr	r0, [r7, #24]
 8002f1e:	f7ff ff05 	bl	8002d2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08e      	sub	sp, #56	; 0x38
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f42:	2300      	movs	r3, #0
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <xQueueGenericSend+0x32>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <xQueueGenericSend+0x40>
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <xQueueGenericSend+0x44>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <xQueueGenericSend+0x46>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <xQueueGenericSend+0x60>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d103      	bne.n	8002fa2 <xQueueGenericSend+0x6e>
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <xQueueGenericSend+0x72>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xQueueGenericSend+0x74>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	623b      	str	r3, [r7, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fc2:	f001 fa05 	bl	80043d0 <xTaskGetSchedulerState>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <xQueueGenericSend+0x9e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <xQueueGenericSend+0xa2>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <xQueueGenericSend+0xa4>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	61fb      	str	r3, [r7, #28]
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ff2:	f001 ff47 	bl	8004e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <xQueueGenericSend+0xd4>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d129      	bne.n	800305c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300e:	f000 fa0b 	bl	8003428 <prvCopyDataToQueue>
 8003012:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	3324      	adds	r3, #36	; 0x24
 8003020:	4618      	mov	r0, r3
 8003022:	f001 f815 	bl	8004050 <xTaskRemoveFromEventList>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800302c:	4b3f      	ldr	r3, [pc, #252]	; (800312c <xQueueGenericSend+0x1f8>)
 800302e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	e00a      	b.n	8003054 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003044:	4b39      	ldr	r3, [pc, #228]	; (800312c <xQueueGenericSend+0x1f8>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003054:	f001 ff46 	bl	8004ee4 <vPortExitCritical>
				return pdPASS;
 8003058:	2301      	movs	r3, #1
 800305a:	e063      	b.n	8003124 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003062:	f001 ff3f 	bl	8004ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003066:	2300      	movs	r3, #0
 8003068:	e05c      	b.n	8003124 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4618      	mov	r0, r3
 8003076:	f001 f84f 	bl	8004118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800307a:	2301      	movs	r3, #1
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800307e:	f001 ff31 	bl	8004ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003082:	f000 fd7f 	bl	8003b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003086:	f001 fefd 	bl	8004e84 <vPortEnterCritical>
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003090:	b25b      	sxtb	r3, r3
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d103      	bne.n	80030a0 <xQueueGenericSend+0x16c>
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d103      	bne.n	80030b6 <xQueueGenericSend+0x182>
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030b6:	f001 ff15 	bl	8004ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ba:	1d3a      	adds	r2, r7, #4
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 f83e 	bl	8004144 <xTaskCheckForTimeOut>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d124      	bne.n	8003118 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d0:	f000 faa2 	bl	8003618 <prvIsQueueFull>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d018      	beq.n	800310c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	3310      	adds	r3, #16
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 ff64 	bl	8003fb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ea:	f000 fa2d 	bl	8003548 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030ee:	f000 fd57 	bl	8003ba0 <xTaskResumeAll>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f47f af7c 	bne.w	8002ff2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <xQueueGenericSend+0x1f8>)
 80030fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	e772      	b.n	8002ff2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800310c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800310e:	f000 fa1b 	bl	8003548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003112:	f000 fd45 	bl	8003ba0 <xTaskResumeAll>
 8003116:	e76c      	b.n	8002ff2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800311a:	f000 fa15 	bl	8003548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800311e:	f000 fd3f 	bl	8003ba0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003122:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003124:	4618      	mov	r0, r3
 8003126:	3738      	adds	r7, #56	; 0x38
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b090      	sub	sp, #64	; 0x40
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <xQueueGenericSendFromISR+0x3c>
 8003164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <xQueueGenericSendFromISR+0x40>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <xQueueGenericSendFromISR+0x42>
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003188:	bf00      	nop
 800318a:	e7fe      	b.n	800318a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d103      	bne.n	800319a <xQueueGenericSendFromISR+0x6a>
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <xQueueGenericSendFromISR+0x6e>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <xQueueGenericSendFromISR+0x70>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	623b      	str	r3, [r7, #32]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ba:	f001 ff45 	bl	8005048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031be:	f3ef 8211 	mrs	r2, BASEPRI
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	61fa      	str	r2, [r7, #28]
 80031d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <xQueueGenericSendFromISR+0xbc>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d12f      	bne.n	800324c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003202:	f000 f911 	bl	8003428 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003206:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d112      	bne.n	8003236 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	3324      	adds	r3, #36	; 0x24
 800321c:	4618      	mov	r0, r3
 800321e:	f000 ff17 	bl	8004050 <xTaskRemoveFromEventList>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00e      	beq.n	8003246 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e007      	b.n	8003246 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800323a:	3301      	adds	r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	b25a      	sxtb	r2, r3
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003246:	2301      	movs	r3, #1
 8003248:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800324a:	e001      	b.n	8003250 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800324c:	2300      	movs	r3, #0
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003252:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800325a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800325e:	4618      	mov	r0, r3
 8003260:	3740      	adds	r7, #64	; 0x40
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	; 0x30
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <xQueueReceive+0x30>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	623b      	str	r3, [r7, #32]
}
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <xQueueReceive+0x3e>
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <xQueueReceive+0x42>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <xQueueReceive+0x44>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xQueueReceive+0x5e>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	61fb      	str	r3, [r7, #28]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032c6:	f001 f883 	bl	80043d0 <xTaskGetSchedulerState>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <xQueueReceive+0x6e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <xQueueReceive+0x72>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <xQueueReceive+0x74>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xQueueReceive+0x8e>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	61bb      	str	r3, [r7, #24]
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032f6:	f001 fdc5 	bl	8004e84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01f      	beq.n	8003346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330a:	f000 f8f7 	bl	80034fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00f      	beq.n	800333e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	3310      	adds	r3, #16
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fe94 	bl	8004050 <xTaskRemoveFromEventList>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800332e:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <xQueueReceive+0x1bc>)
 8003330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800333e:	f001 fdd1 	bl	8004ee4 <vPortExitCritical>
				return pdPASS;
 8003342:	2301      	movs	r3, #1
 8003344:	e069      	b.n	800341a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800334c:	f001 fdca 	bl	8004ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003350:	2300      	movs	r3, #0
 8003352:	e062      	b.n	800341a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800335a:	f107 0310 	add.w	r3, r7, #16
 800335e:	4618      	mov	r0, r3
 8003360:	f000 feda 	bl	8004118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003364:	2301      	movs	r3, #1
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003368:	f001 fdbc 	bl	8004ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800336c:	f000 fc0a 	bl	8003b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003370:	f001 fd88 	bl	8004e84 <vPortEnterCritical>
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800337a:	b25b      	sxtb	r3, r3
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d103      	bne.n	800338a <xQueueReceive+0x122>
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003390:	b25b      	sxtb	r3, r3
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d103      	bne.n	80033a0 <xQueueReceive+0x138>
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a0:	f001 fda0 	bl	8004ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033a4:	1d3a      	adds	r2, r7, #4
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fec9 	bl	8004144 <xTaskCheckForTimeOut>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d123      	bne.n	8003400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ba:	f000 f917 	bl	80035ec <prvIsQueueEmpty>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d017      	beq.n	80033f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	3324      	adds	r3, #36	; 0x24
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fdef 	bl	8003fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033d4:	f000 f8b8 	bl	8003548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033d8:	f000 fbe2 	bl	8003ba0 <xTaskResumeAll>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d189      	bne.n	80032f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <xQueueReceive+0x1bc>)
 80033e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	e780      	b.n	80032f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033f6:	f000 f8a7 	bl	8003548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033fa:	f000 fbd1 	bl	8003ba0 <xTaskResumeAll>
 80033fe:	e77a      	b.n	80032f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003402:	f000 f8a1 	bl	8003548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003406:	f000 fbcb 	bl	8003ba0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800340a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800340c:	f000 f8ee 	bl	80035ec <prvIsQueueEmpty>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	f43f af6f 	beq.w	80032f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800341a:	4618      	mov	r0, r3
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d14d      	bne.n	80034ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 ffda 	bl	800440c <xTaskPriorityDisinherit>
 8003458:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	e043      	b.n	80034ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d119      	bne.n	800349c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6858      	ldr	r0, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	461a      	mov	r2, r3
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	f002 f83e 	bl	80054f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	441a      	add	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d32b      	bcc.n	80034ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e026      	b.n	80034ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68d8      	ldr	r0, [r3, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	461a      	mov	r2, r3
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	f002 f824 	bl	80054f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	425b      	negs	r3, r3
 80034b6:	441a      	add	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d207      	bcs.n	80034d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	425b      	negs	r3, r3
 80034d2:	441a      	add	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d105      	bne.n	80034ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034f2:	697b      	ldr	r3, [r7, #20]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	441a      	add	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	429a      	cmp	r2, r3
 8003526:	d303      	bcc.n	8003530 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	461a      	mov	r2, r3
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f001 ffda 	bl	80054f4 <memcpy>
	}
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003550:	f001 fc98 	bl	8004e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800355a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800355c:	e011      	b.n	8003582 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d012      	beq.n	800358c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3324      	adds	r3, #36	; 0x24
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fd70 	bl	8004050 <xTaskRemoveFromEventList>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003576:	f000 fe47 	bl	8004208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	3b01      	subs	r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	dce9      	bgt.n	800355e <prvUnlockQueue+0x16>
 800358a:	e000      	b.n	800358e <prvUnlockQueue+0x46>
					break;
 800358c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	22ff      	movs	r2, #255	; 0xff
 8003592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003596:	f001 fca5 	bl	8004ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800359a:	f001 fc73 	bl	8004e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035a6:	e011      	b.n	80035cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3310      	adds	r3, #16
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fd4b 	bl	8004050 <xTaskRemoveFromEventList>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035c0:	f000 fe22 	bl	8004208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035c4:	7bbb      	ldrb	r3, [r7, #14]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	dce9      	bgt.n	80035a8 <prvUnlockQueue+0x60>
 80035d4:	e000      	b.n	80035d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	22ff      	movs	r2, #255	; 0xff
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035e0:	f001 fc80 	bl	8004ee4 <vPortExitCritical>
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035f4:	f001 fc46 	bl	8004e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e001      	b.n	800360a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800360a:	f001 fc6b 	bl	8004ee4 <vPortExitCritical>

	return xReturn;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003620:	f001 fc30 	bl	8004e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	429a      	cmp	r2, r3
 800362e:	d102      	bne.n	8003636 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e001      	b.n	800363a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800363a:	f001 fc53 	bl	8004ee4 <vPortExitCritical>

	return xReturn;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e014      	b.n	8003682 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003658:	4a0f      	ldr	r2, [pc, #60]	; (8003698 <vQueueAddToRegistry+0x50>)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003664:	490c      	ldr	r1, [pc, #48]	; (8003698 <vQueueAddToRegistry+0x50>)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <vQueueAddToRegistry+0x50>)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800367a:	e006      	b.n	800368a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3301      	adds	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b07      	cmp	r3, #7
 8003686:	d9e7      	bls.n	8003658 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	200009f4 	.word	0x200009f4

0800369c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036ac:	f001 fbea 	bl	8004e84 <vPortEnterCritical>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036b6:	b25b      	sxtb	r3, r3
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d103      	bne.n	80036c6 <vQueueWaitForMessageRestricted+0x2a>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d103      	bne.n	80036dc <vQueueWaitForMessageRestricted+0x40>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036dc:	f001 fc02 	bl	8004ee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3324      	adds	r3, #36	; 0x24
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fc81 	bl	8003ff8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f7ff ff26 	bl	8003548 <prvUnlockQueue>
	}
 80036fc:	bf00      	nop
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af04      	add	r7, sp, #16
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	623b      	str	r3, [r7, #32]
}
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <xTaskCreateStatic+0x46>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	61fb      	str	r3, [r7, #28]
}
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800374a:	2360      	movs	r3, #96	; 0x60
 800374c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b60      	cmp	r3, #96	; 0x60
 8003752:	d00a      	beq.n	800376a <xTaskCreateStatic+0x66>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	61bb      	str	r3, [r7, #24]
}
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800376a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01e      	beq.n	80037b0 <xTaskCreateStatic+0xac>
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003780:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	2202      	movs	r2, #2
 8003786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800378a:	2300      	movs	r3, #0
 800378c:	9303      	str	r3, [sp, #12]
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f850 	bl	8003848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037aa:	f000 f8df 	bl	800396c <prvAddNewTaskToReadyList>
 80037ae:	e001      	b.n	80037b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037b4:	697b      	ldr	r3, [r7, #20]
	}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3728      	adds	r7, #40	; 0x28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08c      	sub	sp, #48	; 0x30
 80037c2:	af04      	add	r7, sp, #16
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fc78 	bl	80050c8 <pvPortMalloc>
 80037d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037e0:	2060      	movs	r0, #96	; 0x60
 80037e2:	f001 fc71 	bl	80050c8 <pvPortMalloc>
 80037e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
 80037f4:	e005      	b.n	8003802 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037f6:	6978      	ldr	r0, [r7, #20]
 80037f8:	f001 fd32 	bl	8005260 <vPortFree>
 80037fc:	e001      	b.n	8003802 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d017      	beq.n	8003838 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	2300      	movs	r3, #0
 8003814:	9303      	str	r3, [sp, #12]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	9302      	str	r3, [sp, #8]
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f80e 	bl	8003848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800382c:	69f8      	ldr	r0, [r7, #28]
 800382e:	f000 f89d 	bl	800396c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003832:	2301      	movs	r3, #1
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e002      	b.n	800383e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
 800383c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800383e:	69bb      	ldr	r3, [r7, #24]
	}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	461a      	mov	r2, r3
 8003860:	21a5      	movs	r1, #165	; 0xa5
 8003862:	f001 fe1b 	bl	800549c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003870:	3b01      	subs	r3, #1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	617b      	str	r3, [r7, #20]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e012      	b.n	80038d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	7819      	ldrb	r1, [r3, #0]
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	3334      	adds	r3, #52	; 0x34
 80038bc:	460a      	mov	r2, r1
 80038be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d9e9      	bls.n	80038ac <prvInitialiseNewTask+0x64>
 80038d8:	e000      	b.n	80038dc <prvInitialiseNewTask+0x94>
			{
				break;
 80038da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e4:	e003      	b.n	80038ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	2b37      	cmp	r3, #55	; 0x37
 80038f2:	d901      	bls.n	80038f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038f4:	2337      	movs	r3, #55	; 0x37
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	2200      	movs	r2, #0
 8003908:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f978 	bl	8002c04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	3318      	adds	r3, #24
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f973 	bl	8002c04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	2200      	movs	r2, #0
 800393e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	2200      	movs	r2, #0
 8003944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	69b8      	ldr	r0, [r7, #24]
 800394e:	f001 f96d 	bl	8004c2c <pxPortInitialiseStack>
 8003952:	4602      	mov	r2, r0
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003962:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003964:	bf00      	nop
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003974:	f001 fa86 	bl	8004e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <prvAddNewTaskToReadyList+0xc4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <prvAddNewTaskToReadyList+0xc4>)
 8003980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800398a:	4a2a      	ldr	r2, [pc, #168]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <prvAddNewTaskToReadyList+0xc4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d110      	bne.n	80039ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003998:	f000 fc5c 	bl	8004254 <prvInitialiseTaskLists>
 800399c:	e00d      	b.n	80039ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <prvAddNewTaskToReadyList+0xcc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d802      	bhi.n	80039ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039b4:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039ba:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <prvAddNewTaskToReadyList+0xd0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <prvAddNewTaskToReadyList+0xd0>)
 80039c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039c4:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <prvAddNewTaskToReadyList+0xd0>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <prvAddNewTaskToReadyList+0xd4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d903      	bls.n	80039e0 <prvAddNewTaskToReadyList+0x74>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <prvAddNewTaskToReadyList+0xd4>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <prvAddNewTaskToReadyList+0xd8>)
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f7ff f911 	bl	8002c1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039fc:	f001 fa72 	bl	8004ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <prvAddNewTaskToReadyList+0xcc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d207      	bcs.n	8003a26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <prvAddNewTaskToReadyList+0xdc>)
 8003a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000f08 	.word	0x20000f08
 8003a34:	20000a34 	.word	0x20000a34
 8003a38:	20000f14 	.word	0x20000f14
 8003a3c:	20000f24 	.word	0x20000f24
 8003a40:	20000f10 	.word	0x20000f10
 8003a44:	20000a38 	.word	0x20000a38
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d017      	beq.n	8003a8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <vTaskDelay+0x60>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <vTaskDelay+0x30>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	60bb      	str	r3, [r7, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a7c:	f000 f882 	bl	8003b84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a80:	2100      	movs	r1, #0
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fd30 	bl	80044e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a88:	f000 f88a 	bl	8003ba0 <xTaskResumeAll>
 8003a8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <vTaskDelay+0x64>)
 8003a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000f30 	.word	0x20000f30
 8003ab0:	e000ed04 	.word	0xe000ed04

08003ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ac2:	463a      	mov	r2, r7
 8003ac4:	1d39      	adds	r1, r7, #4
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f846 	bl	8002b5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	9202      	str	r2, [sp, #8]
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	4922      	ldr	r1, [pc, #136]	; (8003b6c <vTaskStartScheduler+0xb8>)
 8003ae4:	4822      	ldr	r0, [pc, #136]	; (8003b70 <vTaskStartScheduler+0xbc>)
 8003ae6:	f7ff fe0d 	bl	8003704 <xTaskCreateStatic>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4a21      	ldr	r2, [pc, #132]	; (8003b74 <vTaskStartScheduler+0xc0>)
 8003aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <vTaskStartScheduler+0xc0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003af8:	2301      	movs	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e001      	b.n	8003b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d102      	bne.n	8003b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b08:	f000 fd42 	bl	8004590 <xTimerCreateTimerTask>
 8003b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d118      	bne.n	8003b46 <vTaskStartScheduler+0x92>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	613b      	str	r3, [r7, #16]
}
 8003b26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <vTaskStartScheduler+0xc4>)
 8003b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <vTaskStartScheduler+0xc8>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <vTaskStartScheduler+0xcc>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003b3c:	f7fc fcc6 	bl	80004cc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b40:	f001 f8fe 	bl	8004d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b44:	e00e      	b.n	8003b64 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d10a      	bne.n	8003b64 <vTaskStartScheduler+0xb0>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60fb      	str	r3, [r7, #12]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <vTaskStartScheduler+0xae>
}
 8003b64:	bf00      	nop
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	0800552c 	.word	0x0800552c
 8003b70:	08004221 	.word	0x08004221
 8003b74:	20000f2c 	.word	0x20000f2c
 8003b78:	20000f28 	.word	0x20000f28
 8003b7c:	20000f14 	.word	0x20000f14
 8003b80:	20000f0c 	.word	0x20000f0c

08003b84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <vTaskSuspendAll+0x18>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	4a03      	ldr	r2, [pc, #12]	; (8003b9c <vTaskSuspendAll+0x18>)
 8003b90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000f30 	.word	0x20000f30

08003ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bae:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <xTaskResumeAll+0x118>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <xTaskResumeAll+0x2c>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	603b      	str	r3, [r7, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bcc:	f001 f95a 	bl	8004e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <xTaskResumeAll+0x118>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	4a38      	ldr	r2, [pc, #224]	; (8003cb8 <xTaskResumeAll+0x118>)
 8003bd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bda:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <xTaskResumeAll+0x118>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d162      	bne.n	8003ca8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <xTaskResumeAll+0x11c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d05e      	beq.n	8003ca8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bea:	e02f      	b.n	8003c4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bec:	4b34      	ldr	r3, [pc, #208]	; (8003cc0 <xTaskResumeAll+0x120>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3318      	adds	r3, #24
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff f86d 	bl	8002cd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff f868 	bl	8002cd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <xTaskResumeAll+0x124>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d903      	bls.n	8003c1c <xTaskResumeAll+0x7c>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	4a2a      	ldr	r2, [pc, #168]	; (8003cc4 <xTaskResumeAll+0x124>)
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4a27      	ldr	r2, [pc, #156]	; (8003cc8 <xTaskResumeAll+0x128>)
 8003c2a:	441a      	add	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f7fe fff3 	bl	8002c1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <xTaskResumeAll+0x12c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d302      	bcc.n	8003c4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <xTaskResumeAll+0x130>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <xTaskResumeAll+0x120>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1cb      	bne.n	8003bec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c5a:	f000 fb99 	bl	8004390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <xTaskResumeAll+0x134>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d010      	beq.n	8003c8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c6a:	f000 f847 	bl	8003cfc <xTaskIncrementTick>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c74:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <xTaskResumeAll+0x130>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f1      	bne.n	8003c6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c86:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <xTaskResumeAll+0x134>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c8c:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <xTaskResumeAll+0x130>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d009      	beq.n	8003ca8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <xTaskResumeAll+0x138>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ca8:	f001 f91c 	bl	8004ee4 <vPortExitCritical>

	return xAlreadyYielded;
 8003cac:	68bb      	ldr	r3, [r7, #8]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000f30 	.word	0x20000f30
 8003cbc:	20000f08 	.word	0x20000f08
 8003cc0:	20000ec8 	.word	0x20000ec8
 8003cc4:	20000f10 	.word	0x20000f10
 8003cc8:	20000a38 	.word	0x20000a38
 8003ccc:	20000a34 	.word	0x20000a34
 8003cd0:	20000f1c 	.word	0x20000f1c
 8003cd4:	20000f18 	.word	0x20000f18
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <xTaskGetTickCount+0x1c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ce8:	687b      	ldr	r3, [r7, #4]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000f0c 	.word	0x20000f0c

08003cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d06:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <xTaskIncrementTick+0x148>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 808f 	bne.w	8003e2e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d10:	4b4d      	ldr	r3, [pc, #308]	; (8003e48 <xTaskIncrementTick+0x14c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d18:	4a4b      	ldr	r2, [pc, #300]	; (8003e48 <xTaskIncrementTick+0x14c>)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d120      	bne.n	8003d66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d24:	4b49      	ldr	r3, [pc, #292]	; (8003e4c <xTaskIncrementTick+0x150>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <xTaskIncrementTick+0x46>
 8003d44:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <xTaskIncrementTick+0x150>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <xTaskIncrementTick+0x154>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <xTaskIncrementTick+0x150>)
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4a3f      	ldr	r2, [pc, #252]	; (8003e50 <xTaskIncrementTick+0x154>)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <xTaskIncrementTick+0x158>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	4a3d      	ldr	r2, [pc, #244]	; (8003e54 <xTaskIncrementTick+0x158>)
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	f000 fb15 	bl	8004390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d66:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <xTaskIncrementTick+0x15c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d349      	bcc.n	8003e04 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d70:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <xTaskIncrementTick+0x150>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <xTaskIncrementTick+0x15c>)
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d80:	601a      	str	r2, [r3, #0]
					break;
 8003d82:	e03f      	b.n	8003e04 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d84:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <xTaskIncrementTick+0x150>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d203      	bcs.n	8003da4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d9c:	4a2e      	ldr	r2, [pc, #184]	; (8003e58 <xTaskIncrementTick+0x15c>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003da2:	e02f      	b.n	8003e04 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe ff95 	bl	8002cd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3318      	adds	r3, #24
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe ff8c 	bl	8002cd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <xTaskIncrementTick+0x160>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d903      	bls.n	8003dd4 <xTaskIncrementTick+0xd8>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <xTaskIncrementTick+0x160>)
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <xTaskIncrementTick+0x164>)
 8003de2:	441a      	add	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f7fe ff17 	bl	8002c1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <xTaskIncrementTick+0x168>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3b8      	bcc.n	8003d70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e02:	e7b5      	b.n	8003d70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e04:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <xTaskIncrementTick+0x168>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	4915      	ldr	r1, [pc, #84]	; (8003e60 <xTaskIncrementTick+0x164>)
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d901      	bls.n	8003e20 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <xTaskIncrementTick+0x16c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e004      	b.n	8003e38 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <xTaskIncrementTick+0x170>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3301      	adds	r3, #1
 8003e34:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <xTaskIncrementTick+0x170>)
 8003e36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e38:	697b      	ldr	r3, [r7, #20]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000f30 	.word	0x20000f30
 8003e48:	20000f0c 	.word	0x20000f0c
 8003e4c:	20000ec0 	.word	0x20000ec0
 8003e50:	20000ec4 	.word	0x20000ec4
 8003e54:	20000f20 	.word	0x20000f20
 8003e58:	20000f28 	.word	0x20000f28
 8003e5c:	20000f10 	.word	0x20000f10
 8003e60:	20000a38 	.word	0x20000a38
 8003e64:	20000a34 	.word	0x20000a34
 8003e68:	20000f1c 	.word	0x20000f1c
 8003e6c:	20000f18 	.word	0x20000f18

08003e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <vTaskSwitchContext+0x124>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e7e:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <vTaskSwitchContext+0x128>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e84:	e081      	b.n	8003f8a <vTaskSwitchContext+0x11a>
		xYieldPending = pdFALSE;
 8003e86:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <vTaskSwitchContext+0x128>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003e8c:	f7fc fb25 	bl	80004da <getRunTimeCounterValue>
 8003e90:	4603      	mov	r3, r0
 8003e92:	4a42      	ldr	r2, [pc, #264]	; (8003f9c <vTaskSwitchContext+0x12c>)
 8003e94:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003e96:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <vTaskSwitchContext+0x12c>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <vTaskSwitchContext+0x130>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d909      	bls.n	8003eb6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003ea2:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <vTaskSwitchContext+0x134>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ea8:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <vTaskSwitchContext+0x12c>)
 8003eaa:	6810      	ldr	r0, [r2, #0]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <vTaskSwitchContext+0x130>)
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	1a82      	subs	r2, r0, r2
 8003eb2:	440a      	add	r2, r1
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8003eb6:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <vTaskSwitchContext+0x12c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a39      	ldr	r2, [pc, #228]	; (8003fa0 <vTaskSwitchContext+0x130>)
 8003ebc:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <vTaskSwitchContext+0x134>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d111      	bne.n	8003efa <vTaskSwitchContext+0x8a>
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d10b      	bne.n	8003efa <vTaskSwitchContext+0x8a>
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d105      	bne.n	8003efa <vTaskSwitchContext+0x8a>
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d008      	beq.n	8003f0c <vTaskSwitchContext+0x9c>
 8003efa:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <vTaskSwitchContext+0x134>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <vTaskSwitchContext+0x134>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3334      	adds	r3, #52	; 0x34
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f7fc faf6 	bl	80004f8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0c:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <vTaskSwitchContext+0x138>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	e010      	b.n	8003f36 <vTaskSwitchContext+0xc6>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <vTaskSwitchContext+0xc0>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	607b      	str	r3, [r7, #4]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <vTaskSwitchContext+0xbe>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	491d      	ldr	r1, [pc, #116]	; (8003fac <vTaskSwitchContext+0x13c>)
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0e4      	beq.n	8003f14 <vTaskSwitchContext+0xa4>
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <vTaskSwitchContext+0x13c>)
 8003f56:	4413      	add	r3, r2
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d104      	bne.n	8003f7a <vTaskSwitchContext+0x10a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <vTaskSwitchContext+0x134>)
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <vTaskSwitchContext+0x138>)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	6013      	str	r3, [r2, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000f30 	.word	0x20000f30
 8003f98:	20000f1c 	.word	0x20000f1c
 8003f9c:	20000f38 	.word	0x20000f38
 8003fa0:	20000f34 	.word	0x20000f34
 8003fa4:	20000a34 	.word	0x20000a34
 8003fa8:	20000f10 	.word	0x20000f10
 8003fac:	20000a38 	.word	0x20000a38

08003fb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	60fb      	str	r3, [r7, #12]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <vTaskPlaceOnEventList+0x44>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3318      	adds	r3, #24
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fe fe41 	bl	8002c66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	6838      	ldr	r0, [r7, #0]
 8003fe8:	f000 fa7e 	bl	80044e8 <prvAddCurrentTaskToDelayedList>
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000a34 	.word	0x20000a34

08003ff8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	617b      	str	r3, [r7, #20]
}
 800401c:	bf00      	nop
 800401e:	e7fe      	b.n	800401e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <vTaskPlaceOnEventListRestricted+0x54>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3318      	adds	r3, #24
 8004026:	4619      	mov	r1, r3
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7fe fdf8 	bl	8002c1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004034:	f04f 33ff 	mov.w	r3, #4294967295
 8004038:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	68b8      	ldr	r0, [r7, #8]
 800403e:	f000 fa53 	bl	80044e8 <prvAddCurrentTaskToDelayedList>
	}
 8004042:	bf00      	nop
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000a34 	.word	0x20000a34

08004050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60fb      	str	r3, [r7, #12]
}
 8004078:	bf00      	nop
 800407a:	e7fe      	b.n	800407a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	3318      	adds	r3, #24
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fe29 	bl	8002cd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <xTaskRemoveFromEventList+0xb0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11d      	bne.n	80040ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3304      	adds	r3, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fe20 	bl	8002cd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <xTaskRemoveFromEventList+0xb4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d903      	bls.n	80040ac <xTaskRemoveFromEventList+0x5c>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	4a16      	ldr	r2, [pc, #88]	; (8004104 <xTaskRemoveFromEventList+0xb4>)
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4a13      	ldr	r2, [pc, #76]	; (8004108 <xTaskRemoveFromEventList+0xb8>)
 80040ba:	441a      	add	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f7fe fdab 	bl	8002c1e <vListInsertEnd>
 80040c8:	e005      	b.n	80040d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	3318      	adds	r3, #24
 80040ce:	4619      	mov	r1, r3
 80040d0:	480e      	ldr	r0, [pc, #56]	; (800410c <xTaskRemoveFromEventList+0xbc>)
 80040d2:	f7fe fda4 	bl	8002c1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <xTaskRemoveFromEventList+0xc0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d905      	bls.n	80040f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <xTaskRemoveFromEventList+0xc4>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e001      	b.n	80040f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040f4:	697b      	ldr	r3, [r7, #20]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000f30 	.word	0x20000f30
 8004104:	20000f10 	.word	0x20000f10
 8004108:	20000a38 	.word	0x20000a38
 800410c:	20000ec8 	.word	0x20000ec8
 8004110:	20000a34 	.word	0x20000a34
 8004114:	20000f1c 	.word	0x20000f1c

08004118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <vTaskInternalSetTimeOutState+0x24>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <vTaskInternalSetTimeOutState+0x28>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	605a      	str	r2, [r3, #4]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000f20 	.word	0x20000f20
 8004140:	20000f0c 	.word	0x20000f0c

08004144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	613b      	str	r3, [r7, #16]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	60fb      	str	r3, [r7, #12]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004186:	f000 fe7d 	bl	8004e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <xTaskCheckForTimeOut+0xbc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d102      	bne.n	80041aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e023      	b.n	80041f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <xTaskCheckForTimeOut+0xc0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d007      	beq.n	80041c6 <xTaskCheckForTimeOut+0x82>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	e015      	b.n	80041f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d20b      	bcs.n	80041e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	1ad2      	subs	r2, r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff ff9b 	bl	8004118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e004      	b.n	80041f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041f2:	f000 fe77 	bl	8004ee4 <vPortExitCritical>

	return xReturn;
 80041f6:	69fb      	ldr	r3, [r7, #28]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000f0c 	.word	0x20000f0c
 8004204:	20000f20 	.word	0x20000f20

08004208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <vTaskMissedYield+0x14>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000f1c 	.word	0x20000f1c

08004220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004228:	f000 f854 	bl	80042d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <prvIdleTask+0x2c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d907      	bls.n	8004244 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <prvIdleTask+0x30>)
 8004236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004244:	f7fc f951 	bl	80004ea <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004248:	e7ee      	b.n	8004228 <prvIdleTask+0x8>
 800424a:	bf00      	nop
 800424c:	20000a38 	.word	0x20000a38
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800425a:	2300      	movs	r3, #0
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	e00c      	b.n	800427a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <prvInitialiseTaskLists+0x60>)
 800426c:	4413      	add	r3, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fca8 	bl	8002bc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3301      	adds	r3, #1
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b37      	cmp	r3, #55	; 0x37
 800427e:	d9ef      	bls.n	8004260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004280:	480d      	ldr	r0, [pc, #52]	; (80042b8 <prvInitialiseTaskLists+0x64>)
 8004282:	f7fe fc9f 	bl	8002bc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004286:	480d      	ldr	r0, [pc, #52]	; (80042bc <prvInitialiseTaskLists+0x68>)
 8004288:	f7fe fc9c 	bl	8002bc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <prvInitialiseTaskLists+0x6c>)
 800428e:	f7fe fc99 	bl	8002bc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004292:	480c      	ldr	r0, [pc, #48]	; (80042c4 <prvInitialiseTaskLists+0x70>)
 8004294:	f7fe fc96 	bl	8002bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004298:	480b      	ldr	r0, [pc, #44]	; (80042c8 <prvInitialiseTaskLists+0x74>)
 800429a:	f7fe fc93 	bl	8002bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <prvInitialiseTaskLists+0x78>)
 80042a0:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <prvInitialiseTaskLists+0x64>)
 80042a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <prvInitialiseTaskLists+0x7c>)
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <prvInitialiseTaskLists+0x68>)
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000a38 	.word	0x20000a38
 80042b8:	20000e98 	.word	0x20000e98
 80042bc:	20000eac 	.word	0x20000eac
 80042c0:	20000ec8 	.word	0x20000ec8
 80042c4:	20000edc 	.word	0x20000edc
 80042c8:	20000ef4 	.word	0x20000ef4
 80042cc:	20000ec0 	.word	0x20000ec0
 80042d0:	20000ec4 	.word	0x20000ec4

080042d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042da:	e019      	b.n	8004310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042dc:	f000 fdd2 	bl	8004e84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <prvCheckTasksWaitingTermination+0x50>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe fcf3 	bl	8002cd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <prvCheckTasksWaitingTermination+0x54>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <prvCheckTasksWaitingTermination+0x54>)
 80042fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 8004304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004306:	f000 fded 	bl	8004ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f810 	bl	8004330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e1      	bne.n	80042dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000edc 	.word	0x20000edc
 8004328:	20000f08 	.word	0x20000f08
 800432c:	20000ef0 	.word	0x20000ef0

08004330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4618      	mov	r0, r3
 8004348:	f000 ff8a 	bl	8005260 <vPortFree>
				vPortFree( pxTCB );
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 ff87 	bl	8005260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004352:	e018      	b.n	8004386 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800435a:	2b01      	cmp	r3, #1
 800435c:	d103      	bne.n	8004366 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 ff7e 	bl	8005260 <vPortFree>
	}
 8004364:	e00f      	b.n	8004386 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800436c:	2b02      	cmp	r3, #2
 800436e:	d00a      	beq.n	8004386 <prvDeleteTCB+0x56>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <prvDeleteTCB+0x54>
	}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <prvResetNextTaskUnblockTime+0x38>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <prvResetNextTaskUnblockTime+0x3c>)
 80043a2:	f04f 32ff 	mov.w	r2, #4294967295
 80043a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043a8:	e008      	b.n	80043bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <prvResetNextTaskUnblockTime+0x38>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <prvResetNextTaskUnblockTime+0x3c>)
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000ec0 	.word	0x20000ec0
 80043cc:	20000f28 	.word	0x20000f28

080043d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <xTaskGetSchedulerState+0x34>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043de:	2301      	movs	r3, #1
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	e008      	b.n	80043f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <xTaskGetSchedulerState+0x38>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043ec:	2302      	movs	r3, #2
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e001      	b.n	80043f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043f6:	687b      	ldr	r3, [r7, #4]
	}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	20000f14 	.word	0x20000f14
 8004408:	20000f30 	.word	0x20000f30

0800440c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d056      	beq.n	80044d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004422:	4b2e      	ldr	r3, [pc, #184]	; (80044dc <xTaskPriorityDisinherit+0xd0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	d00a      	beq.n	8004442 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	60fb      	str	r3, [r7, #12]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	1e5a      	subs	r2, r3, #1
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	429a      	cmp	r2, r3
 8004474:	d02c      	beq.n	80044d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d128      	bne.n	80044d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	3304      	adds	r3, #4
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fc28 	bl	8002cd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <xTaskPriorityDisinherit+0xd4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d903      	bls.n	80044b0 <xTaskPriorityDisinherit+0xa4>
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <xTaskPriorityDisinherit+0xd4>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <xTaskPriorityDisinherit+0xd8>)
 80044be:	441a      	add	r2, r3
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f7fe fba9 	bl	8002c1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044d0:	697b      	ldr	r3, [r7, #20]
	}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000a34 	.word	0x20000a34
 80044e0:	20000f10 	.word	0x20000f10
 80044e4:	20000a38 	.word	0x20000a38

080044e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044f2:	4b21      	ldr	r3, [pc, #132]	; (8004578 <prvAddCurrentTaskToDelayedList+0x90>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f8:	4b20      	ldr	r3, [pc, #128]	; (800457c <prvAddCurrentTaskToDelayedList+0x94>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fbea 	bl	8002cd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d10a      	bne.n	8004522 <prvAddCurrentTaskToDelayedList+0x3a>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <prvAddCurrentTaskToDelayedList+0x94>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4819      	ldr	r0, [pc, #100]	; (8004580 <prvAddCurrentTaskToDelayedList+0x98>)
 800451c:	f7fe fb7f 	bl	8002c1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004520:	e026      	b.n	8004570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <prvAddCurrentTaskToDelayedList+0x94>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	429a      	cmp	r2, r3
 8004538:	d209      	bcs.n	800454e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <prvAddCurrentTaskToDelayedList+0x9c>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <prvAddCurrentTaskToDelayedList+0x94>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7fe fb8d 	bl	8002c66 <vListInsert>
}
 800454c:	e010      	b.n	8004570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800454e:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <prvAddCurrentTaskToDelayedList+0x94>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f7fe fb83 	bl	8002c66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004560:	4b0a      	ldr	r3, [pc, #40]	; (800458c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	d202      	bcs.n	8004570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <prvAddCurrentTaskToDelayedList+0xa4>)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6013      	str	r3, [r2, #0]
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000f0c 	.word	0x20000f0c
 800457c:	20000a34 	.word	0x20000a34
 8004580:	20000ef4 	.word	0x20000ef4
 8004584:	20000ec4 	.word	0x20000ec4
 8004588:	20000ec0 	.word	0x20000ec0
 800458c:	20000f28 	.word	0x20000f28

08004590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800459a:	f000 fb07 	bl	8004bac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800459e:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <xTimerCreateTimerTask+0x80>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d021      	beq.n	80045ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045ae:	1d3a      	adds	r2, r7, #4
 80045b0:	f107 0108 	add.w	r1, r7, #8
 80045b4:	f107 030c 	add.w	r3, r7, #12
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fae9 	bl	8002b90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	9202      	str	r2, [sp, #8]
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	2302      	movs	r3, #2
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	460a      	mov	r2, r1
 80045d0:	4910      	ldr	r1, [pc, #64]	; (8004614 <xTimerCreateTimerTask+0x84>)
 80045d2:	4811      	ldr	r0, [pc, #68]	; (8004618 <xTimerCreateTimerTask+0x88>)
 80045d4:	f7ff f896 	bl	8003704 <xTaskCreateStatic>
 80045d8:	4603      	mov	r3, r0
 80045da:	4a10      	ldr	r2, [pc, #64]	; (800461c <xTimerCreateTimerTask+0x8c>)
 80045dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <xTimerCreateTimerTask+0x8c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045e6:	2301      	movs	r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	613b      	str	r3, [r7, #16]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004606:	697b      	ldr	r3, [r7, #20]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000f6c 	.word	0x20000f6c
 8004614:	0800555c 	.word	0x0800555c
 8004618:	08004755 	.word	0x08004755
 800461c:	20000f70 	.word	0x20000f70

08004620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	623b      	str	r3, [r7, #32]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <xTimerGenericCommand+0x98>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d02a      	beq.n	80046ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b05      	cmp	r3, #5
 8004666:	dc18      	bgt.n	800469a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004668:	f7ff feb2 	bl	80043d0 <xTaskGetSchedulerState>
 800466c:	4603      	mov	r3, r0
 800466e:	2b02      	cmp	r3, #2
 8004670:	d109      	bne.n	8004686 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004672:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <xTimerGenericCommand+0x98>)
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f107 0110 	add.w	r1, r7, #16
 800467a:	2300      	movs	r3, #0
 800467c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467e:	f7fe fc59 	bl	8002f34 <xQueueGenericSend>
 8004682:	6278      	str	r0, [r7, #36]	; 0x24
 8004684:	e012      	b.n	80046ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <xTimerGenericCommand+0x98>)
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f107 0110 	add.w	r1, r7, #16
 800468e:	2300      	movs	r3, #0
 8004690:	2200      	movs	r2, #0
 8004692:	f7fe fc4f 	bl	8002f34 <xQueueGenericSend>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24
 8004698:	e008      	b.n	80046ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <xTimerGenericCommand+0x98>)
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f107 0110 	add.w	r1, r7, #16
 80046a2:	2300      	movs	r3, #0
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	f7fe fd43 	bl	8003130 <xQueueGenericSendFromISR>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3728      	adds	r7, #40	; 0x28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000f6c 	.word	0x20000f6c

080046bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c6:	4b22      	ldr	r3, [pc, #136]	; (8004750 <prvProcessExpiredTimer+0x94>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe faff 	bl	8002cd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d022      	beq.n	800472e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	18d1      	adds	r1, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f000 f8d1 	bl	800489c <prvInsertTimerInActiveList>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01f      	beq.n	8004740 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004700:	2300      	movs	r3, #0
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	2100      	movs	r1, #0
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f7ff ff88 	bl	8004620 <xTimerGenericCommand>
 8004710:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d113      	bne.n	8004740 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60fb      	str	r3, [r7, #12]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	6978      	ldr	r0, [r7, #20]
 8004746:	4798      	blx	r3
}
 8004748:	bf00      	nop
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000f64 	.word	0x20000f64

08004754 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f857 	bl	8004814 <prvGetNextExpireTime>
 8004766:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4619      	mov	r1, r3
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f803 	bl	8004778 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004772:	f000 f8d5 	bl	8004920 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004776:	e7f1      	b.n	800475c <prvTimerTask+0x8>

08004778 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004782:	f7ff f9ff 	bl	8003b84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f866 	bl	800485c <prvSampleTimeNow>
 8004790:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d130      	bne.n	80047fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <prvProcessTimerOrBlockTask+0x3c>
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d806      	bhi.n	80047b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047a6:	f7ff f9fb 	bl	8003ba0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff85 	bl	80046bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047b2:	e024      	b.n	80047fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <prvProcessTimerOrBlockTask+0x90>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <prvProcessTimerOrBlockTask+0x50>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <prvProcessTimerOrBlockTask+0x52>
 80047c8:	2300      	movs	r3, #0
 80047ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <prvProcessTimerOrBlockTask+0x94>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	f7fe ff5f 	bl	800369c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047de:	f7ff f9df 	bl	8003ba0 <xTaskResumeAll>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <prvProcessTimerOrBlockTask+0x98>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
}
 80047f8:	e001      	b.n	80047fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047fa:	f7ff f9d1 	bl	8003ba0 <xTaskResumeAll>
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000f68 	.word	0x20000f68
 800480c:	20000f6c 	.word	0x20000f6c
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <prvGetNextExpireTime+0x44>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <prvGetNextExpireTime+0x16>
 8004826:	2201      	movs	r2, #1
 8004828:	e000      	b.n	800482c <prvGetNextExpireTime+0x18>
 800482a:	2200      	movs	r2, #0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004838:	4b07      	ldr	r3, [pc, #28]	; (8004858 <prvGetNextExpireTime+0x44>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e001      	b.n	8004848 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004848:	68fb      	ldr	r3, [r7, #12]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000f64 	.word	0x20000f64

0800485c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004864:	f7ff fa3a 	bl	8003cdc <xTaskGetTickCount>
 8004868:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvSampleTimeNow+0x3c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d205      	bcs.n	8004880 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004874:	f000 f936 	bl	8004ae4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e002      	b.n	8004886 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004886:	4a04      	ldr	r2, [pc, #16]	; (8004898 <prvSampleTimeNow+0x3c>)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800488c:	68fb      	ldr	r3, [r7, #12]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000f74 	.word	0x20000f74

0800489c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d812      	bhi.n	80048e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d302      	bcc.n	80048d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e01b      	b.n	800490e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <prvInsertTimerInActiveList+0x7c>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7fe f9c0 	bl	8002c66 <vListInsert>
 80048e6:	e012      	b.n	800490e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d206      	bcs.n	80048fe <prvInsertTimerInActiveList+0x62>
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e007      	b.n	800490e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <prvInsertTimerInActiveList+0x80>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7fe f9ac 	bl	8002c66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800490e:	697b      	ldr	r3, [r7, #20]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000f68 	.word	0x20000f68
 800491c:	20000f64 	.word	0x20000f64

08004920 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08e      	sub	sp, #56	; 0x38
 8004924:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004926:	e0ca      	b.n	8004abe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	da18      	bge.n	8004960 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	3304      	adds	r3, #4
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61fb      	str	r3, [r7, #28]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004956:	6850      	ldr	r0, [r2, #4]
 8004958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	4611      	mov	r1, r2
 800495e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f2c0 80ab 	blt.w	8004abe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	3304      	adds	r3, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe f9ad 	bl	8002cd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800497e:	463b      	mov	r3, r7
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff ff6b 	bl	800485c <prvSampleTimeNow>
 8004986:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b09      	cmp	r3, #9
 800498c:	f200 8096 	bhi.w	8004abc <prvProcessReceivedCommands+0x19c>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <prvProcessReceivedCommands+0x78>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049c1 	.word	0x080049c1
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c1 	.word	0x080049c1
 80049a4:	08004a35 	.word	0x08004a35
 80049a8:	08004a49 	.word	0x08004a49
 80049ac:	08004a93 	.word	0x08004a93
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	080049c1 	.word	0x080049c1
 80049b8:	08004a35 	.word	0x08004a35
 80049bc:	08004a49 	.word	0x08004a49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	18d1      	adds	r1, r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e0:	f7ff ff5c 	bl	800489c <prvInsertTimerInActiveList>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d069      	beq.n	8004abe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05e      	beq.n	8004abe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	441a      	add	r2, r3
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	2100      	movs	r1, #0
 8004a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a12:	f7ff fe05 	bl	8004620 <xTimerGenericCommand>
 8004a16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d14f      	bne.n	8004abe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	61bb      	str	r3, [r7, #24]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a46:	e03a      	b.n	8004abe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	617b      	str	r3, [r7, #20]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	18d1      	adds	r1, r2, r3
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8c:	f7ff ff06 	bl	800489c <prvInsertTimerInActiveList>
					break;
 8004a90:	e015      	b.n	8004abe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa2:	f000 fbdd 	bl	8005260 <vPortFree>
 8004aa6:	e00a      	b.n	8004abe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004aba:	e000      	b.n	8004abe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004abc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <prvProcessReceivedCommands+0x1c0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	1d39      	adds	r1, r7, #4
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fbce 	bl	8003268 <xQueueReceive>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f47f af2a 	bne.w	8004928 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	3730      	adds	r7, #48	; 0x30
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000f6c 	.word	0x20000f6c

08004ae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aea:	e048      	b.n	8004b7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aec:	4b2d      	ldr	r3, [pc, #180]	; (8004ba4 <prvSwitchTimerLists+0xc0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af6:	4b2b      	ldr	r3, [pc, #172]	; (8004ba4 <prvSwitchTimerLists+0xc0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe f8e7 	bl	8002cd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02e      	beq.n	8004b7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d90e      	bls.n	8004b50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b3e:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <prvSwitchTimerLists+0xc0>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7fe f88c 	bl	8002c66 <vListInsert>
 8004b4e:	e016      	b.n	8004b7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b50:	2300      	movs	r3, #0
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2300      	movs	r3, #0
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	2100      	movs	r1, #0
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fd60 	bl	8004620 <xTimerGenericCommand>
 8004b60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	603b      	str	r3, [r7, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <prvSwitchTimerLists+0xc0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1b1      	bne.n	8004aec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <prvSwitchTimerLists+0xc0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <prvSwitchTimerLists+0xc4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <prvSwitchTimerLists+0xc0>)
 8004b94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <prvSwitchTimerLists+0xc4>)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	6013      	str	r3, [r2, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000f64 	.word	0x20000f64
 8004ba8:	20000f68 	.word	0x20000f68

08004bac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bb2:	f000 f967 	bl	8004e84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <prvCheckForValidListAndQueue+0x60>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d120      	bne.n	8004c00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bbe:	4814      	ldr	r0, [pc, #80]	; (8004c10 <prvCheckForValidListAndQueue+0x64>)
 8004bc0:	f7fe f800 	bl	8002bc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bc4:	4813      	ldr	r0, [pc, #76]	; (8004c14 <prvCheckForValidListAndQueue+0x68>)
 8004bc6:	f7fd fffd 	bl	8002bc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <prvCheckForValidListAndQueue+0x6c>)
 8004bcc:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <prvCheckForValidListAndQueue+0x64>)
 8004bce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <prvCheckForValidListAndQueue+0x70>)
 8004bd2:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <prvCheckForValidListAndQueue+0x68>)
 8004bd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <prvCheckForValidListAndQueue+0x74>)
 8004bdc:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <prvCheckForValidListAndQueue+0x78>)
 8004bde:	2110      	movs	r1, #16
 8004be0:	200a      	movs	r0, #10
 8004be2:	f7fe f90b 	bl	8002dfc <xQueueGenericCreateStatic>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <prvCheckForValidListAndQueue+0x60>)
 8004bea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <prvCheckForValidListAndQueue+0x60>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <prvCheckForValidListAndQueue+0x60>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	490b      	ldr	r1, [pc, #44]	; (8004c28 <prvCheckForValidListAndQueue+0x7c>)
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe fd24 	bl	8003648 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c00:	f000 f970 	bl	8004ee4 <vPortExitCritical>
}
 8004c04:	bf00      	nop
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000f6c 	.word	0x20000f6c
 8004c10:	20000f3c 	.word	0x20000f3c
 8004c14:	20000f50 	.word	0x20000f50
 8004c18:	20000f64 	.word	0x20000f64
 8004c1c:	20000f68 	.word	0x20000f68
 8004c20:	20001018 	.word	0x20001018
 8004c24:	20000f78 	.word	0x20000f78
 8004c28:	08005564 	.word	0x08005564

08004c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3b04      	subs	r3, #4
 8004c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f023 0201 	bic.w	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3b04      	subs	r3, #4
 8004c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c5c:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <pxPortInitialiseStack+0x64>)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3b14      	subs	r3, #20
 8004c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3b04      	subs	r3, #4
 8004c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f06f 0202 	mvn.w	r2, #2
 8004c7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b20      	subs	r3, #32
 8004c80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c82:	68fb      	ldr	r3, [r7, #12]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	08004c95 	.word	0x08004c95

08004c94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <prvTaskExitError+0x54>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca6:	d00a      	beq.n	8004cbe <prvTaskExitError+0x2a>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60fb      	str	r3, [r7, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <prvTaskExitError+0x28>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60bb      	str	r3, [r7, #8]
}
 8004cd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cd2:	bf00      	nop
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0fc      	beq.n	8004cd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	2000000c 	.word	0x2000000c
 8004cec:	00000000 	.word	0x00000000

08004cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <pxCurrentTCBConst2>)
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	6808      	ldr	r0, [r1, #0]
 8004cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfa:	f380 8809 	msr	PSP, r0
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f380 8811 	msr	BASEPRI, r0
 8004d0a:	4770      	bx	lr
 8004d0c:	f3af 8000 	nop.w

08004d10 <pxCurrentTCBConst2>:
 8004d10:	20000a34 	.word	0x20000a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop

08004d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d18:	4808      	ldr	r0, [pc, #32]	; (8004d3c <prvPortStartFirstTask+0x24>)
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	6800      	ldr	r0, [r0, #0]
 8004d1e:	f380 8808 	msr	MSP, r0
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f380 8814 	msr	CONTROL, r0
 8004d2a:	b662      	cpsie	i
 8004d2c:	b661      	cpsie	f
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	df00      	svc	0
 8004d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d3a:	bf00      	nop
 8004d3c:	e000ed08 	.word	0xe000ed08

08004d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d46:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <xPortStartScheduler+0x120>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a46      	ldr	r2, [pc, #280]	; (8004e64 <xPortStartScheduler+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d10a      	bne.n	8004d66 <xPortStartScheduler+0x26>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	613b      	str	r3, [r7, #16]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d66:	4b3e      	ldr	r3, [pc, #248]	; (8004e60 <xPortStartScheduler+0x120>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <xPortStartScheduler+0x128>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d10a      	bne.n	8004d86 <xPortStartScheduler+0x46>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60fb      	str	r3, [r7, #12]
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d86:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <xPortStartScheduler+0x12c>)
 8004d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	22ff      	movs	r2, #255	; 0xff
 8004d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <xPortStartScheduler+0x130>)
 8004dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dae:	4b31      	ldr	r3, [pc, #196]	; (8004e74 <xPortStartScheduler+0x134>)
 8004db0:	2207      	movs	r2, #7
 8004db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004db4:	e009      	b.n	8004dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004db6:	4b2f      	ldr	r3, [pc, #188]	; (8004e74 <xPortStartScheduler+0x134>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <xPortStartScheduler+0x134>)
 8004dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d0ef      	beq.n	8004db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dd6:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <xPortStartScheduler+0x134>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1c3 0307 	rsb	r3, r3, #7
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d00a      	beq.n	8004df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60bb      	str	r3, [r7, #8]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004df8:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <xPortStartScheduler+0x134>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <xPortStartScheduler+0x134>)
 8004e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e02:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <xPortStartScheduler+0x134>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e0a:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <xPortStartScheduler+0x134>)
 8004e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e16:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <xPortStartScheduler+0x138>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <xPortStartScheduler+0x138>)
 8004e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <xPortStartScheduler+0x138>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <xPortStartScheduler+0x138>)
 8004e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e2e:	f000 f8dd 	bl	8004fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <xPortStartScheduler+0x13c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e38:	f000 f8fc 	bl	8005034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <xPortStartScheduler+0x140>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0f      	ldr	r2, [pc, #60]	; (8004e80 <xPortStartScheduler+0x140>)
 8004e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e48:	f7ff ff66 	bl	8004d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e4c:	f7ff f810 	bl	8003e70 <vTaskSwitchContext>
	prvTaskExitError();
 8004e50:	f7ff ff20 	bl	8004c94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	e000ed00 	.word	0xe000ed00
 8004e64:	410fc271 	.word	0x410fc271
 8004e68:	410fc270 	.word	0x410fc270
 8004e6c:	e000e400 	.word	0xe000e400
 8004e70:	20001068 	.word	0x20001068
 8004e74:	2000106c 	.word	0x2000106c
 8004e78:	e000ed20 	.word	0xe000ed20
 8004e7c:	2000000c 	.word	0x2000000c
 8004e80:	e000ef34 	.word	0xe000ef34

08004e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	607b      	str	r3, [r7, #4]
}
 8004e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <vPortEnterCritical+0x58>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <vPortEnterCritical+0x58>)
 8004ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <vPortEnterCritical+0x58>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10f      	bne.n	8004ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <vPortEnterCritical+0x5c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	603b      	str	r3, [r7, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <vPortEnterCritical+0x4a>
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	2000000c 	.word	0x2000000c
 8004ee0:	e000ed04 	.word	0xe000ed04

08004ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <vPortExitCritical+0x50>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <vPortExitCritical+0x24>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	607b      	str	r3, [r7, #4]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <vPortExitCritical+0x50>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <vPortExitCritical+0x50>)
 8004f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <vPortExitCritical+0x50>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <vPortExitCritical+0x42>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f383 8811 	msr	BASEPRI, r3
}
 8004f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000000c 	.word	0x2000000c
	...

08004f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f40:	f3ef 8009 	mrs	r0, PSP
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <pxCurrentTCBConst>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	f01e 0f10 	tst.w	lr, #16
 8004f50:	bf08      	it	eq
 8004f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	6010      	str	r0, [r2, #0]
 8004f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f64:	f380 8811 	msr	BASEPRI, r0
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f7fe ff7e 	bl	8003e70 <vTaskSwitchContext>
 8004f74:	f04f 0000 	mov.w	r0, #0
 8004f78:	f380 8811 	msr	BASEPRI, r0
 8004f7c:	bc09      	pop	{r0, r3}
 8004f7e:	6819      	ldr	r1, [r3, #0]
 8004f80:	6808      	ldr	r0, [r1, #0]
 8004f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f86:	f01e 0f10 	tst.w	lr, #16
 8004f8a:	bf08      	it	eq
 8004f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f90:	f380 8809 	msr	PSP, r0
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	f3af 8000 	nop.w

08004fa0 <pxCurrentTCBConst>:
 8004fa0:	20000a34 	.word	0x20000a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop

08004fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	607b      	str	r3, [r7, #4]
}
 8004fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fc2:	f7fe fe9b 	bl	8003cfc <xTaskIncrementTick>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <xPortSysTickHandler+0x40>)
 8004fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f383 8811 	msr	BASEPRI, r3
}
 8004fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <vPortSetupTimerInterrupt+0x34>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <vPortSetupTimerInterrupt+0x38>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <vPortSetupTimerInterrupt+0x3c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0a      	ldr	r2, [pc, #40]	; (800502c <vPortSetupTimerInterrupt+0x40>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	099b      	lsrs	r3, r3, #6
 8005008:	4a09      	ldr	r2, [pc, #36]	; (8005030 <vPortSetupTimerInterrupt+0x44>)
 800500a:	3b01      	subs	r3, #1
 800500c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800500e:	4b04      	ldr	r3, [pc, #16]	; (8005020 <vPortSetupTimerInterrupt+0x34>)
 8005010:	2207      	movs	r2, #7
 8005012:	601a      	str	r2, [r3, #0]
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	e000e010 	.word	0xe000e010
 8005024:	e000e018 	.word	0xe000e018
 8005028:	20000000 	.word	0x20000000
 800502c:	10624dd3 	.word	0x10624dd3
 8005030:	e000e014 	.word	0xe000e014

08005034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005044 <vPortEnableVFP+0x10>
 8005038:	6801      	ldr	r1, [r0, #0]
 800503a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800503e:	6001      	str	r1, [r0, #0]
 8005040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005042:	bf00      	nop
 8005044:	e000ed88 	.word	0xe000ed88

08005048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800504e:	f3ef 8305 	mrs	r3, IPSR
 8005052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	d914      	bls.n	8005084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800505a:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <vPortValidateInterruptPriority+0x70>)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <vPortValidateInterruptPriority+0x74>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	7afa      	ldrb	r2, [r7, #11]
 800506a:	429a      	cmp	r2, r3
 800506c:	d20a      	bcs.n	8005084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <vPortValidateInterruptPriority+0x78>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800508c:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <vPortValidateInterruptPriority+0x7c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d90a      	bls.n	80050aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	603b      	str	r3, [r7, #0]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <vPortValidateInterruptPriority+0x60>
	}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	e000e3f0 	.word	0xe000e3f0
 80050bc:	20001068 	.word	0x20001068
 80050c0:	e000ed0c 	.word	0xe000ed0c
 80050c4:	2000106c 	.word	0x2000106c

080050c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050d4:	f7fe fd56 	bl	8003b84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050d8:	4b5b      	ldr	r3, [pc, #364]	; (8005248 <pvPortMalloc+0x180>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050e0:	f000 f920 	bl	8005324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <pvPortMalloc+0x184>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 8093 	bne.w	8005218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01d      	beq.n	8005134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050f8:	2208      	movs	r2, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d014      	beq.n	8005134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f023 0307 	bic.w	r3, r3, #7
 8005110:	3308      	adds	r3, #8
 8005112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <pvPortMalloc+0x6c>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	617b      	str	r3, [r7, #20]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d06e      	beq.n	8005218 <pvPortMalloc+0x150>
 800513a:	4b45      	ldr	r3, [pc, #276]	; (8005250 <pvPortMalloc+0x188>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d869      	bhi.n	8005218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005144:	4b43      	ldr	r3, [pc, #268]	; (8005254 <pvPortMalloc+0x18c>)
 8005146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <pvPortMalloc+0x18c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800514e:	e004      	b.n	800515a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d903      	bls.n	800516c <pvPortMalloc+0xa4>
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f1      	bne.n	8005150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800516c:	4b36      	ldr	r3, [pc, #216]	; (8005248 <pvPortMalloc+0x180>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	429a      	cmp	r2, r3
 8005174:	d050      	beq.n	8005218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2208      	movs	r2, #8
 800517c:	4413      	add	r3, r2
 800517e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	2308      	movs	r3, #8
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	429a      	cmp	r2, r3
 8005196:	d91f      	bls.n	80051d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <pvPortMalloc+0xf8>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	613b      	str	r3, [r7, #16]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	1ad2      	subs	r2, r2, r3
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051d2:	69b8      	ldr	r0, [r7, #24]
 80051d4:	f000 f908 	bl	80053e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051d8:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <pvPortMalloc+0x188>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	4a1b      	ldr	r2, [pc, #108]	; (8005250 <pvPortMalloc+0x188>)
 80051e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <pvPortMalloc+0x188>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <pvPortMalloc+0x190>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d203      	bcs.n	80051fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <pvPortMalloc+0x188>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <pvPortMalloc+0x190>)
 80051f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <pvPortMalloc+0x184>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	431a      	orrs	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <pvPortMalloc+0x194>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a11      	ldr	r2, [pc, #68]	; (800525c <pvPortMalloc+0x194>)
 8005216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005218:	f7fe fcc2 	bl	8003ba0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <pvPortMalloc+0x174>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60fb      	str	r3, [r7, #12]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <pvPortMalloc+0x172>
	return pvReturn;
 800523c:	69fb      	ldr	r3, [r7, #28]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3728      	adds	r7, #40	; 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20004c78 	.word	0x20004c78
 800524c:	20004c8c 	.word	0x20004c8c
 8005250:	20004c7c 	.word	0x20004c7c
 8005254:	20004c70 	.word	0x20004c70
 8005258:	20004c80 	.word	0x20004c80
 800525c:	20004c84 	.word	0x20004c84

08005260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04d      	beq.n	800530e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005272:	2308      	movs	r3, #8
 8005274:	425b      	negs	r3, r3
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4413      	add	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <vPortFree+0xb8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <vPortFree+0x44>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	60fb      	str	r3, [r7, #12]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <vPortFree+0x62>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	60bb      	str	r3, [r7, #8]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <vPortFree+0xb8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01e      	beq.n	800530e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11a      	bne.n	800530e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <vPortFree+0xb8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	401a      	ands	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052e8:	f7fe fc4c 	bl	8003b84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <vPortFree+0xbc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4413      	add	r3, r2
 80052f6:	4a09      	ldr	r2, [pc, #36]	; (800531c <vPortFree+0xbc>)
 80052f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052fa:	6938      	ldr	r0, [r7, #16]
 80052fc:	f000 f874 	bl	80053e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <vPortFree+0xc0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	4a06      	ldr	r2, [pc, #24]	; (8005320 <vPortFree+0xc0>)
 8005308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800530a:	f7fe fc49 	bl	8003ba0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800530e:	bf00      	nop
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20004c8c 	.word	0x20004c8c
 800531c:	20004c7c 	.word	0x20004c7c
 8005320:	20004c88 	.word	0x20004c88

08005324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800532a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800532e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <prvHeapInit+0xac>)
 8005332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3307      	adds	r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <prvHeapInit+0xac>)
 8005354:	4413      	add	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800535c:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <prvHeapInit+0xb0>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005362:	4b1c      	ldr	r3, [pc, #112]	; (80053d4 <prvHeapInit+0xb0>)
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005370:	2208      	movs	r2, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <prvHeapInit+0xb4>)
 8005384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <prvHeapInit+0xb4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <prvHeapInit+0xb4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <prvHeapInit+0xb4>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <prvHeapInit+0xb8>)
 80053b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <prvHeapInit+0xbc>)
 80053ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <prvHeapInit+0xc0>)
 80053be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20001070 	.word	0x20001070
 80053d4:	20004c70 	.word	0x20004c70
 80053d8:	20004c78 	.word	0x20004c78
 80053dc:	20004c80 	.word	0x20004c80
 80053e0:	20004c7c 	.word	0x20004c7c
 80053e4:	20004c8c 	.word	0x20004c8c

080053e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <prvInsertBlockIntoFreeList+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e002      	b.n	80053fc <prvInsertBlockIntoFreeList+0x14>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	429a      	cmp	r2, r3
 8005404:	d8f7      	bhi.n	80053f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4413      	add	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d108      	bne.n	800542a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d118      	bne.n	8005470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <prvInsertBlockIntoFreeList+0xb0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d00d      	beq.n	8005466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e008      	b.n	8005478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvInsertBlockIntoFreeList+0xb0>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e003      	b.n	8005478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d002      	beq.n	8005486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20004c70 	.word	0x20004c70
 8005498:	20004c78 	.word	0x20004c78

0800549c <memset>:
 800549c:	4402      	add	r2, r0
 800549e:	4603      	mov	r3, r0
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d100      	bne.n	80054a6 <memset+0xa>
 80054a4:	4770      	bx	lr
 80054a6:	f803 1b01 	strb.w	r1, [r3], #1
 80054aa:	e7f9      	b.n	80054a0 <memset+0x4>

080054ac <__libc_init_array>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	4d0d      	ldr	r5, [pc, #52]	; (80054e4 <__libc_init_array+0x38>)
 80054b0:	4c0d      	ldr	r4, [pc, #52]	; (80054e8 <__libc_init_array+0x3c>)
 80054b2:	1b64      	subs	r4, r4, r5
 80054b4:	10a4      	asrs	r4, r4, #2
 80054b6:	2600      	movs	r6, #0
 80054b8:	42a6      	cmp	r6, r4
 80054ba:	d109      	bne.n	80054d0 <__libc_init_array+0x24>
 80054bc:	4d0b      	ldr	r5, [pc, #44]	; (80054ec <__libc_init_array+0x40>)
 80054be:	4c0c      	ldr	r4, [pc, #48]	; (80054f0 <__libc_init_array+0x44>)
 80054c0:	f000 f826 	bl	8005510 <_init>
 80054c4:	1b64      	subs	r4, r4, r5
 80054c6:	10a4      	asrs	r4, r4, #2
 80054c8:	2600      	movs	r6, #0
 80054ca:	42a6      	cmp	r6, r4
 80054cc:	d105      	bne.n	80054da <__libc_init_array+0x2e>
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d4:	4798      	blx	r3
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7ee      	b.n	80054b8 <__libc_init_array+0xc>
 80054da:	f855 3b04 	ldr.w	r3, [r5], #4
 80054de:	4798      	blx	r3
 80054e0:	3601      	adds	r6, #1
 80054e2:	e7f2      	b.n	80054ca <__libc_init_array+0x1e>
 80054e4:	080055b0 	.word	0x080055b0
 80054e8:	080055b0 	.word	0x080055b0
 80054ec:	080055b0 	.word	0x080055b0
 80054f0:	080055b4 	.word	0x080055b4

080054f4 <memcpy>:
 80054f4:	440a      	add	r2, r1
 80054f6:	4291      	cmp	r1, r2
 80054f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054fc:	d100      	bne.n	8005500 <memcpy+0xc>
 80054fe:	4770      	bx	lr
 8005500:	b510      	push	{r4, lr}
 8005502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800550a:	4291      	cmp	r1, r2
 800550c:	d1f9      	bne.n	8005502 <memcpy+0xe>
 800550e:	bd10      	pop	{r4, pc}

08005510 <_init>:
 8005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005512:	bf00      	nop
 8005514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005516:	bc08      	pop	{r3}
 8005518:	469e      	mov	lr, r3
 800551a:	4770      	bx	lr

0800551c <_fini>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	bf00      	nop
 8005520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005522:	bc08      	pop	{r3}
 8005524:	469e      	mov	lr, r3
 8005526:	4770      	bx	lr
